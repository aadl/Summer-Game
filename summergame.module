<?php
/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function summergame_help($path, $arg) {
  $content = '';
  switch ($path) {
    case "admin/help#summergame":
      $content = '<p>'. t('Summer Game system') .'</p>';
      break;
  }
  return $content;
}

/**
 * Implementation of hook_perm().
 */
function summergame_perm() {
  return array('access summergame', 'administer summergame');
}

/**
 * Implementation of hook_init()
 * Turns off caching for all summergame pages
 */
function summergame_init() {
  if (strpos($_GET['q'], 'summergame') === 0) {
    $GLOBALS['conf']['cache'] = FALSE;
  }

  global $user;
  if ($user->uid) {
    // Get all players for this user
    $user_players = summergame_player_load_all($user->uid);
    // Determine currently active player
    if ($user->sg_active_pid) {
      foreach ($user_players as $i => $user_player) {
        if ($user_player['pid'] == $user->sg_active_pid) {
          $active_player = $user_player;
          unset($user_players[$i]);
        }
      }
    }
    else {
      $active_player = array_shift($user_players);
    }

    $user->player = summergame_player_load($active_player['pid']);
    $user->other_players = $user_players;
  }
}

/**
 * Implementation of hook_menu().
 */
function summergame_menu() {
  $items = array();

  $items['admin/settings/summergame'] = array(
    'title' => 'Summer Game Settings',
    'description' => 'Site Settings for the Summer Game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['summergame/admin'] = array(
    'title' => 'Summer Game Admin',
    'description' => 'Administer the Summer Game',
    'page callback' => 'summergame_admin',
    'access arguments' => array('administer summergame'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['summergame/admin/gamecodes'] = array(
    'title' => 'Administer Game Codes',
    'page callback' => 'summergame_admin_gamecodes',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/add'] = array(
    'title' => 'Add new Summer Game Code',
    'page callback' => 'summergame_admin_edit',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/edit'] = array(
    'title' => 'Edit Summer Game Code',
    'page callback' => 'summergame_admin_edit',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/delete'] = array(
    'title' => 'Delete Summer Game code',
    'page callback' => 'summergame_admin_delete',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/badge'] = array(
    'title' => 'Edit Summer Game Badge',
    'description' => 'Edit a Badge for the Summer Game',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_admin_badge_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/players'] = array(
    'title' => 'Administer Players',
    'page callback' => 'summergame_admin_players',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/players/merge'] = array(
    'title' => 'Administer Players',
    'page callback' => 'summergame_admin_players_merge',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/intervention'] = array(
    'title' => t('Geekly Intervention'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_intervention_form'),
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player'] = array(
    'title' => 'Summer Game Player Page',
    'page callback' => 'summergame_player_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/gamecode'] = array(
    'title' => 'Redeem a Summer Game Code',
    'page callback' => 'summergame_player_redeem_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/consume'] = array(
    'title' => 'I Read/Listened/Watched Something',
    'page callback' => 'summergame_player_consume_page',
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/edit'] = array(
    'title' => t('Summer Game Player Information'),
    'page callback' => 'summergame_player_edit_page',
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/%/setactive'] = array(
    'title' => t('Set Active Player'),
    'page callback' => 'summergame_player_set_active',
    'page arguments' => array(2),
    'access callback' => 'summergame_player_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/gcpc'] = array(
    'title' => t('Summer Game Player Generate Cell Phone Code'),
    'page callback' => 'summergame_player_gcpc',
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/grc'] = array(
    'title' => t('Summer Game Player Generate Referral Code'),
    'page callback' => 'summergame_player_grc',
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/ledger'] = array(
    'title' => 'Summer Game Player Ledger Page',
    'page callback' => 'summergame_player_ledger_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/deletescore'] = array(
    'title' => t('Delete Player Score'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_delete_score_form'),
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/delete'] = array(
    'title' => t('Delete Player'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_delete_player_form'),
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/team'] = array(
    'title' => 'Summer Game Team Page',
    'page callback' => 'summergame_team_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/team/delete'] = array(
    'title' => t('Delete Team'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_delete_team_form'),
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/team/edit'] = array(
    'title' => t('Edit Team'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_team_form'),
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/team/join'] = array(
    'title' => t('Join Team'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_team_join_form'),
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/teams'] = array(
    'title' => t('Team List'),
    'page callback' => 'summergame_teams_list',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/leaderboard'] = array(
    'title' => 'Game Leaderboard',
    'page callback' => 'summergame_leaderboard_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/badge'] = array(
    'title' => 'Summer Game Badge Detail',
    'page callback' => 'summergame_badge_detail_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/badges'] = array(
    'title' => 'Summer Game Badges',
    'page callback' => 'summergame_badges_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/pdf'] = array(
    'title' => t('Summer Game PDF'),
    'page callback' => 'summergame_pdf',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/trivia'] = array(
    'title' => t('Trivia Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_trivia_settings'),
    'access arguments' => array('administer summergame'),
    'description' => 'Settings for the Summer Game Trivia game',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'summergame.trivia.inc',
  );
  $items['summergame/trivia'] = array(
    'title' => t('Summergame Trivia'),
    'page callback' => 'summergame_trivia_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
    'file' => 'summergame.trivia.inc',
  );
  $items['summergame/triviaupdate'] = array(
    'page callback' => 'summergame_trivia_update',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
    'file' => 'summergame.trivia.inc',
  );
  return $items;
}

function summergame_theme() {
  return array(
    'summergame_player_page' => array(
      'template' => 'summergame-player-page',
      'arguments' => array('player' => NULL, 'player_access' => NULL, 'other_players' => NULL),
    ),
  );
}

function summergame_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Leaderboard Filter Block'),
      'visibility' => 1,
      'pages' => "summergame/leaderboard\nsummergame/leaderboard/*",
    );
    return $blocks;
  }
  else if ($op == 'view') {
    if ($delta == 0) {
      $block = array(
        'subject' => t('Filter Leaderboard'),
        'content' => summergame_leaderboard_filter_block_content(),
      );
    }
    return $block;
  }
}

function summergame_leaderboard_filter_block_content() {
  $current = array();
  if ($_GET['type']) {
    $current['type'] = $_GET['type'];
  }
  if ($_GET['range']) {
    $current['range'] = $_GET['range'];
  }
  if ($_GET['staff']) {
    $current['staff'] = $_GET['staff'];
  }
  if ($_GET['team']) {
    $current['team'] = $_GET['team'];
  }

  // Game Types
  $content .= '<h3>Scores by Game</h3><ul>';
  $query = $current;
  unset($query['type']);
//  $content .= '<li>' . ($current['type'] ? l('All Games', 'summergame/leaderboard', array('query' => $query)) : 'All Games') . '</li>';
  $terms = summergame_get_game_terms();
  foreach ($terms as $term) {
    if ($current['type'] == $term) {
      $line_item = $term;
    }
    else {
      $query['type'] = $term;
      $line_item = l($term, 'summergame/leaderboard', array('query' => $query));
    }
    $content .= "<li>$line_item</li>";
  }
  $content .= '</ul>';

  // Time Ranges
  $content .= '<h3>Scores by Time</h3><ul>';
  $query = $current;
  unset($query['range']);
  $time_ranges = array('All Time' => '', 'This Week' => 'week', 'Today' => 'day');
  foreach ($time_ranges as $text => $code) {
    if ($current['range'] == $code) {
      $line_item = $text;
    }
    else {
      $query['range'] = $code;
      $line_item = l($text, 'summergame/leaderboard', array('query' => $query));
    }
    $content .= "<li>$line_item</li>";
  }
  $content .= '</ul>';

  // Player Groups
  $content .= '<h3>Player Groups</h3><ul>';
  $query = $current;
  if ($current['staff']) {
    unset($query['staff']);
    $content .= '<li>' . l('Public', 'summergame/leaderboard', array('query' => $query)) . '</li>';
    $content .= '<li>Staff</li>';
  }
  else {
    $query['staff'] = 1;
    $content .= '<li>Public</li>';
    $content .= '<li>' . l('Staff', 'summergame/leaderboard', array('query' => $query)) . '</li>';
  }
  $content .= '</ul>';

  // Leaderboard Types
  $content .= '<h3>Leaderboard Type</h3><ul>';
  $query = $current;
  if ($current['team']) {
    unset($query['team']);
    $content .= '<li>' . l('Single Player', 'summergame/leaderboard', array('query' => $query)) . '</li>';
    $content .= '<li>Team</li>';
  }
  else {
    $query['team'] = 1;
    $content .= '<li>Single Player</li>';
    $content .= '<li>' . l('Team', 'summergame/leaderboard', array('query' => $query)) . '</li>';
  }
  $content .= '</ul>';

  return $content;
}

/**
 * PAGE: Summer Game Site Settings
 */
function summergame_settings() {
  $form['summergame_points_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Summergame Points Enabled'),
    '#default_value' => variable_get('summergame_points_enabled', 0),
    '#description' => t('Allow players to earn points?'),
  );
  $form['summergame_lego_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Summergame Lego Contest Voting Enabled'),
    '#default_value' => variable_get('summergame_lego_enabled', 0),
    '#description' => t('Turn on voting for the Lego Contest?'),
  );
  $form['summergame_dod_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Summergame Do Or Diag Enabled'),
    '#default_value' => variable_get('summergame_dod_enabled', 0),
    '#description' => t('Turn on the special Do or Diag game?'),
  );
  $form['summergame_current_game_term'] = array(
    '#type' => 'textfield',
    '#title' => t("Current Default Game Term"),
    '#default_value' => variable_get('summergame_current_game_term', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t("Default Game Term to apply to earned points (e.g. SummerGame2011)"),
  );
  $form['summergame_gamecode_default_end'] = array(
    '#type' => 'textfield',
    '#title' => t("Default Game Code End"),
    '#default_value' => variable_get('summergame_gamecode_default_end', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Default Date/Time for when a code stops being active (e.g. "2013-08-31 12:00 AM")'),
  );
  $form['summergame_completion_gamecode'] = array(
    '#type' => 'textfield',
    '#title' => t("Completion Game Code"),
    '#default_value' => variable_get('summergame_completion_gamecode', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t("Game Code awarded for completion of the Classic Reading Game (e.g. PUPPYLOVE13)"),
  );
  $form['summergame_user_search_path'] = array(
    '#type' => 'textfield',
    '#title' => t("User Search Path"),
    '#default_value' => variable_get('summergame_user_search_path', 'search/user'),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t("Path to your user search form"),
  );
  $form['summergame_print_page'] = array(
    '#type' => 'textfield',
    '#title' => t("Print Page"),
    '#default_value' => variable_get('summergame_print_page', ''),
    '#size' => 64,
    '#maxlength' => 128,
    '#description' => t("Path to the page to print summergame game cards"),
  );
  $form['summergame_catalog_domain'] = array(
    '#type' => 'textfield',
    '#title' => t("Catalog Domain"),
    '#default_value' => variable_get('summergame_catalog_domain', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t("Links to catalog pages will be directed to this domain. Leave blank for same domain. (No http:// or trailing slash)"),
  );
  $form['summergame_libphp_path'] = array(
    '#type' => 'textfield',
    '#title' => t("LibPHP path"),
    '#default_value' => variable_get('summergame_libphp_path', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Path to PHP libraries. Needs "contrib/fpdf", "contrib/fpdi", and "contrib/redisent" directories'),
  );
  $user_roles = user_roles(TRUE);
  $user_roles[0] = "NONE";
  $form['summergame_staff_role_id'] = array(
    '#type' => 'select',
    '#title' => 'Staff Role',
    '#options' => $user_roles,
    '#default_value' => variable_get('summergame_staff_role_id', ''),
    '#description' => t('Select the role that separates staff from regular players on the leaderboard'),
  );
  $form['summergame_tagger_uid'] = array(
    '#type' => 'textfield',
    '#title' => t("Tagger User ID"),
    '#default_value' => variable_get('summergame_tagger_uid', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t("User ID to own automatically created Game Code tags in the catalog"),
  );

  return system_settings_form($form);
}

/**
 * PAGE: Summer Game Admin overview
 */
function summergame_admin() {
  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
  $site_admin = user_access('administer site configuration');
  $admin_users = user_access('administer users');
  $content .= '<div id="summergame-admin-page">';
  $content .= '<h1>Summer Game Admin Page</h1>';

  // Print game cards
  $print_page_url = variable_get('summergame_print_page', '');
  $content .= '<div class="print-game-cards">';
  $content .= '<h2 class="title">Print Game Cards</h2>';
  $content .= '<ul>';
  $content .= '<li class="button green">' . l("Batch Print Game Cards", $print_page_url) . '</li>';
  $content .= '</ul>';
  $content .= '</div>';

  // Players
  if ($site_admin) {
    $content .= '<div class="admin-page-player-search">';
    $content .= '<h2 class="title">Players</h2>';
    $content .= drupal_get_form('summergame_player_search_form');
    $content .= '</div>';
  }

  // Game Codes
  $content .= '<ul class="create-new-code"><li class="button green">' . l("Create New Game Code", 'summergame/admin/add') . '</li></ul>';
  $content .= '<h2 class="title game-codes">Game Codes</h2>';
  $content .= drupal_get_form('summergame_admin_gamecode_search_form');

  $limit = 25;
  $rows = array();
  $creators = array();
  $res = db_query("SELECT * FROM sg_game_codes ORDER BY created DESC LIMIT $limit");
  while ($game_code = db_fetch_array($res)) {
    // Load creator info
    $creator_uid = $game_code['creator_uid'];
    if (!$creators[$creator_uid]) {
      $creators[$creator_uid] = user_load($creator_uid);
    }
    $creator = $creators[$creator_uid];

    if (!$site_admin) {
      $game_code['text'] = preg_replace('/\B\w/', '*', $game_code['text']);
    }

    $valid_start = $game_code['valid_start'] ? date('n/d/Y H:i:s', $game_code['valid_start']) : 'Now';
    $valid_end = date('n/d/Y H:i:s', $game_code['valid_end']);
    $rows[] = array(
      'Text' => strlen($game_code['text']) > 25 ? substr($game_code['text'], 0, 25) . '...' : $game_code['text'],
      'Description' => $game_code['description'],
      'Hint' => $game_code['hint'],
      'Points' => $game_code['points'] . ($game_code['diminishing'] ? ' (diminishing)' : ''),
      'Created' => date('n/d/Y', $game_code['created']),
      'Created By' => ($admin_users ? l($creator->name, 'user/' . $creator->uid) : $creator->name),
      'Valid Dates' => $valid_start . '-<br />' . $valid_end,
      'Game Term' => $game_code['game_term'],
      'Redemptions' => $game_code['num_redemptions'] . ' of ' . $game_code['max_redemptions'],
      'Print Sign' => l('print', 'summergame/pdf/gamecode/' . $game_code['code_id']),
      'Edit' => l('edit', 'summergame/admin/edit/' . $game_code['code_id']),
    );
  }
  $content .= theme('table', array_keys($rows[0]), $rows);
  $more_link = l('See all Game Codes', 'summergame/admin/gamecodes');
  $content .= "<p class=\"more\">Showing latest $limit game codes, $more_link</p>";

  // Badges
  if ($site_admin) {
    $content .= '<ul class="create-new-code"><li class="button green">' . l("Create New Badge", 'summergame/admin/badge') . '</li></ul>';
  }
  $content .= '<h2 class="title">Badges</h2>';
  $sg_image_path = base_path() . file_directory_path() . '/sg_images/';
  $rows = array();
  $res = db_query("SELECT * FROM sg_badges ORDER BY bid DESC");
  while ($badge = db_fetch_array($res)) {
    if (!$site_admin) {
      $badge['formula'] = preg_replace('/\B\w/', '*', $badge['formula']);
    }
    $rows[] = array(
      'Badge ID' => ($site_admin ? l($badge['bid'], 'summergame/admin/badge/' . $badge['bid']) : $badge['bid']),
      'Image' => '<img src="' . $sg_image_path . $badge['image'] . '_100.png">',
      'Title' => '<strong>' . $badge['title'] . '</strong>',
      'Difficulty' => $badge['difficulty'],
      'Description' => $badge['description'],
      'Formula' => strlen($badge['formula']) > 25 ? substr($badge['formula'], 0, 25) . '...' : $badge['formula'],
    );
  }
  $content .= theme('table', array_keys($rows[0]), $rows);

  $content .= '</div>'; // #summergame-admin-page

  return $content;
}

/**
 * PAGE: Show all game codes
 */
function summergame_admin_gamecodes($search_term = '') {
  $admin_users = user_access('administer users');
  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
  $content .= '<div id="summergame-admin-page">';

  // Game Codes
  $content .= '<ul class="create-new-code"><li class="button green">' . l("Create New Game Code", 'summergame/admin/add') . '</li></ul>';
  $content .= '<h2 class="title game-codes">Game Codes</h2>';
  $content .= drupal_get_form('summergame_admin_gamecode_search_form', $search_term);

  $rows = array();
  $creators = array();
  if ($search_term) {
    $res = db_query("SELECT * FROM sg_game_codes " .
                    "WHERE text LIKE '%%%s%%' " .
                    "OR description LIKE '%%%s%%' " .
                    "OR hint LIKE '%%%s%%' " .
                    "OR game_term LIKE '%%%s%%' " .
                    "OR game_term_override LIKE '%%%s%%' " .
                    "ORDER BY created DESC",
                    $search_term, $search_term, $search_term, $search_term, $search_term);
  }
  else {
    $res = db_query("SELECT * FROM sg_game_codes ORDER BY created DESC");
  }
  while ($game_code = db_fetch_array($res)) {
    // Load creator info
    $creator_uid = $game_code['creator_uid'];
    if (!$creators[$creator_uid]) {
      $creators[$creator_uid] = user_load($creator_uid);
    }
    $creator = $creators[$creator_uid];

    $valid_start = $game_code['valid_start'] ? date('n/d/Y H:i:s', $game_code['valid_start']) : 'Now';
    $valid_end = date('n/d/Y H:i:s', $game_code['valid_end']);
    $rows[] = array(
      'Text' => user_access('administer site configuration') ? $game_code['text'] : preg_replace('/\B\w/', '*', $game_code['text']),
      'Description' => $game_code['description'],
      'Hint' => $game_code['hint'],
      'Points' => $game_code['points'] . ($game_code['diminishing'] ? ' (diminishing)' : ''),
      'Created' => date('n/d/Y', $game_code['created']),
      'Created By' => ($admin_users ? l($creator->name, 'user/' . $creator->uid) : $creator->name),
      'Valid Dates' => $valid_start . '-<br />' . $valid_end,
      'Game Term' => $game_code['game_term'],
      'Redemptions' => $game_code['num_redemptions'] . ' of ' . $game_code['max_redemptions'],
      'Print Sign' => l('print', 'summergame/pdf/gamecode/' . $game_code['code_id']),
      'Edit' => l('edit', 'summergame/admin/edit/' . $game_code['code_id']),
    );
  }
  if (count($rows)) {
    $content .= theme('table', array_keys($rows[0]), $rows);
  }
  else {
    $content .= '<p>Sorry, no gamecodes to display.</p>';
  }

  $content .= '</div>';

  return $content;
}

function summergame_admin_gamecode_search_form(&$form_state, $search_query = NULL) {
  $form['inline'] = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['inline']['search_query'] = array(
    '#type' => 'textfield',
    '#title' => 'Search Game Codes',
    '#default_value' => $search_query,
    '#size' => 25,
    '#maxlength' => 255,
  );
  $form['inline']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  if ($search_query) {
    $form['inline']['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset to Full List'),
      '#submit' => array('summergame_admin_gamecode_search_reset'),
    );
  }
  return $form;
}

function summergame_admin_gamecode_search_form_submit($form, &$form_state) {
  drupal_goto('summergame/admin/gamecodes/' . $form_state['values']['search_query']);
}

function summergame_admin_gamecode_search_reset($form, &$form_state) {
  drupal_goto('summergame/admin/gamecodes');
}

/**
 * PAGE: Edit a game code
 */
function summergame_admin_edit($code_id = 0) {
  if ($code_id) {
    $game_code = db_fetch_array(db_query("SELECT * FROM sg_game_codes WHERE code_id = %d", $code_id));
  }
  $content .= drupal_get_form('summergame_code_edit_form', $game_code);

  return $content;
}

/**
 * FORM: Edit a game code
 */
function summergame_code_edit_form($form_state, $game_code) {
  $form = array();
  if ($game_code['code_id']) {
    $form['code_id'] = array(
      '#type' => 'value',
      '#value' => $game_code['code_id'],
    );
  }
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Code Text'),
    '#default_value' => $game_code['text'],
    '#size' => 32,
    '#maxlength' => 255,
    '#description' => t('Keyword text for this game code (e.g. APPLESAUCE)'),
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $game_code['description'],
    '#description' => t('Description of the game code award (e.g. Attended Apple Peeling Event)'),
  );
  $form['hint'] = array(
    '#type' => 'textarea',
    '#title' => t('Hint'),
    '#default_value' => $game_code['hint'],
    '#description' => t('Does this code need a hint to figuring it out? Enter a hint here to help figure it out. (e.g. This code is a kind of food made by Mott\'s)'),
  );
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#default_value' => $game_code['points'],
    '#size' => 16,
    '#maxlength' => 8,
    '#description' => t('Points to be awarded for the game code (e.g. 100)'),
  );
  $form['diminishing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Diminishing?'),
    '#default_value' => $game_code['diminishing'],
    '#description' => 'Each successive redemption of the game code will be worth 1 less than the previous redemption',
  );
  $form['max_redemptions'] = array(
    '#type' => 'select',
    '#title' => t('Max Redemptions'),
    '#default_value' => $game_code['max_redemptions'],
    '#options' => array(
      '0' => t('Unlimited'),
      '1' => t('Single User'),
      '2' => '2',
      '3' => '3',
      '4' => '4',
      '5' => '5',
      '10' => '10',
      '25' => '25',
      '50' => '50',
      '100' => '100',
    ),
    '#description' => t('Number of players who can receive points for this award'),
  );
  $form['valid_start'] = array(
    '#type' => 'textfield',
    '#title' => t('Code Start Time Limit'),
    '#default_value' => date('Y-m-d H:i:s', ($game_code['valid_start'] ? $game_code['valid_start'] : time())),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Date/Time for when the code becomes active (e.g. "2012-07-01 9:00 AM")'),
  );
  $form['valid_end'] = array(
    '#type' => 'textfield',
    '#title' => t('Code End Time Limit'),
    '#default_value' => $game_code['valid_end'] ? date('Y-m-d H:i:s', $game_code['valid_end']) : variable_get('summergame_gamecode_default_end', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Date/Time for when the code stops being active (e.g. "2013-08-31 12:00 AM")'),
  );
  $form['game_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Game Term'),
    '#default_value' => $game_code['game_term'] ? $game_code['game_term'] : variable_get('summergame_current_game_term', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Points will be awarded under this Game Term'),
  );
  $form['everlasting'] = array(
    '#type' => 'checkbox',
    '#title' => t('Everlasting?'),
    '#default_value' => $game_code['everlasting'],
    '#description' => 'Should this code be active in following seasons of the Game? (e.g. a code for a collection badge)',
  );
  $form['tag_bib'] = array(
    '#type' => 'textfield',
    '#title' => t('Tag Bib Number'),
    '#size' => 32,
    '#maxlength' => 8,
    '#description' => t('Enter a Bib Number to automatically add this game code as a tag to that Bib record in the catalog'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function summergame_code_edit_form_validate($form, &$form_state) {
  // Remove non-alphanumerics from Game Code text
  $form_state['values']['text'] = preg_replace('/[^A-Za-z0-9]/', '', $form_state['values']['text']);

  // Trim hint
  $from_state['values']['hint'] = trim($from_state['values']['hint']);

  // Check whether game code is unique
  if (!$form_state['values']['code_id']) {
    $res = db_query("SELECT code_id FROM sg_game_codes WHERE text LIKE '%s'", $form_state['values']['text']);
    if ($code = db_fetch_object($res)) {
      form_set_error('text', 'Code text is already in use. Please select another code.');
    }
  }
  if (intval($form_state['values']['points']) < 1) {
    form_set_error('points', 'Please enter a number for the point value');
  }
}

function summergame_code_edit_form_submit($form, &$form_state) {
  global $user;

  // Set end time if blank to default end date, otherwise one month out
  if (empty($form_state['values']['valid_end'])) {
    $one_month = date('Y-m-d H:i:s', strtotime('+1 month'));
    $form_state['values']['valid_end'] = variable_get('summergame_gamecode_default_end', $one_month);
  }
  if ($form_state['values']['code_id']) {
    // Update existing code
    db_query("UPDATE sg_game_codes SET text = '%s', description = '%s', hint = '%s', " .
             "points = %d, diminishing = %d, max_redemptions = %d, " .
             "valid_start = %d, valid_end = %d, game_term = '%s', everlasting = %d WHERE code_id = %d",
             strtoupper($form_state['values']['text']), $form_state['values']['description'],
             $form_state['values']['hint'], $form_state['values']['points'],
             $form_state['values']['diminishing'], $form_state['values']['max_redemptions'],
             strtotime($form_state['values']['valid_start']), strtotime($form_state['values']['valid_end']),
             $form_state['values']['game_term'], $form_state['values']['everlasting'], $form_state['values']['code_id']);
    drupal_set_message('Game Code ' . $form_state['values']['text'] . ' Updated');
  }
  else {
    db_query("INSERT INTO sg_game_codes " .
             "(creator_uid, created, text, description, hint, points, diminishing, max_redemptions, " .
             "valid_start, valid_end, game_term, everlasting) " .
             "VALUES (%d, %d, '%s', '%s', '%s', %d, %d, %d, %d, %d, '%s', %d)",
             $user->uid, time(), strtoupper($form_state['values']['text']), $form_state['values']['description'],
             $form_state['values']['hint'], $form_state['values']['points'], $form_state['values']['diminishing'],
             $form_state['values']['max_redemptions'], strtotime($form_state['values']['valid_start']),
             strtotime($form_state['values']['valid_end']),  $form_state['values']['game_term'],
             $form_state['values']['everlasting']);
    drupal_set_message('Game Code ' . $form_state['values']['text'] . ' Created');
  }

  // Add tag to catalog if selected
  if ($form_state['values']['tag_bib']) {
    if ($tagger_uid = variable_get('summergame_tagger_uid', '')) {
      $bib_num = substr(preg_replace('/[^0-9]/', '', $form_state['values']['tag_bib']), 0, 7);
      $machine_tag = 'sg:code=' . strtolower(trim($form_state['values']['text']));
      $insurge = sopac_get_insurge();
      $insurge->submit_tags($tagger_uid, $bib_num, $machine_tag);
      drupal_set_message('Game Code Tag added to Bib Number ' . l($bib_num, 'catalog/record/' . $bib_num));
    }
  }
  drupal_goto('summergame/admin');
}

/**
 * FORM: Edit a Badge
 */
function summergame_admin_badge_form($form_state, $bid = 0) {
  $form = array();

  if ($bid) {
    $badge = db_fetch_array(db_query("SELECT * FROM sg_badges WHERE bid = %d", $bid));
    $form['bid'] = array(
      '#type' => 'value',
      '#value' => $badge['bid'],
    );
  }

  $form['image'] = array(
    '#type' => 'textfield',
    '#title' => t('Image'),
    '#default_value' => $badge['image'],
    '#size' => 32,
    '#maxlength' => 255,
    '#description' => t('File name for the badge image (no extention). Place original in "files/sg_images_for_resize" to be processed.'),
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $badge['title'],
    '#size' => 64,
    '#maxlength' => 255,
    '#description' => t('Title for the Badge'),
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $badge['description'],
    '#description' => t('Description of the Badge'),
  );
  $form['difficulty'] = array(
    '#type' => 'radios',
    '#title' => t('Difficulty'),
    '#options' => array('Beginner' => 'Beginner', 'Advanced' => 'Advanced', 'Expert' => 'Expert'),
    '#default_value' => $badge['difficulty'],
    '#size' => 32,
    '#maxlength' => 255,
    '#description' => t('Difficulty of the Badge'),
  );
  $form['formula'] = array(
    '#type' => 'textarea',
    '#title' => t('Badge Formula'),
    '#default_value' => $badge['formula'],
    '#description' => t("Must be one of the following formats:<ul>
  <li><strong>Badge Collection Badge:</strong> comma separated list of Badge IDs, surrounded by {} brackets, which must all be earned in order to earn this Badge. e.g. '{100,101,102,103}'</li>
  <li><strong>Ledger Multiple Badge:</strong> awarded when a term appears in the player's ledger a certain number of times. Number and Term are separated by a '::' in the formula. e.g. '10::Checkout History'</li>
  <li><strong>Collection Badge:</strong> list of ledger types or gamecodes needed for awarding a badge. Separate required AND terms with a comma, separate OR terms with a pipe. e.g. 'CODE1|CODE2,CODE3' = badge is awarded is player has CODE1 OR CODE2, AND also has CODE3</li>
</ul>"),
  );
  $form['reveal'] = array(
    '#type' => 'textfield',
    '#title' => t('Reveal'),
    '#default_value' => $badge['reveal'],
    '#size' => 32,
    '#maxlength' => 255,
    '#description' => t('Reveal this badge when the these badge IDs are earned, separate with commas'),
  );
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#default_value' => $badge['points'],
    '#size' => 16,
    '#maxlength' => 8,
    '#description' => t('Points to be awarded for the Badge (e.g. 100)'),
  );
  $form['points_override'] = array(
    '#type' => 'textfield',
    '#title' => t('Points Override'),
    '#default_value' => $badge['points_override'],
    '#size' => 16,
    '#maxlength' => 8,
    '#description' => t('Override Points to be awarded for the Badge (e.g. 100)'),
  );
  $form['game_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Game Term'),
    '#default_value' => $badge['game_term'] ? $badge['game_term'] : variable_get('summergame_current_game_term', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Points will be awarded under this Game Term'),
  );
  $form['game_term_override'] = array(
    '#type' => 'textfield',
    '#title' => t('Game Term Override'),
    '#default_value' => $badge['game_term_override'],
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Override Points will be awarded under this Game Term'),
  );
  $form['active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active?'),
    '#default_value' => $badge['active'],
  );
  $form['email_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Email Message'),
    '#default_value' => $badge['email_message'],
    '#description' => t('Email to be sent when Badge is awarded'),
  );
  $form['email_attachment'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Attachment'),
    '#default_value' => $badge['email_attachment'],
    '#size' => 32,
    '#maxlength' => 255,
    '#description' => t('File to be attached to the award email'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function summergame_admin_badge_form_submit($form, &$form_state) {
  if ($form_state['values']['bid']) {
    // Update existing code
    db_query("UPDATE sg_badges SET image = '%s', title = '%s', description = '%s', " .
             "difficulty = '%s', formula = '%s', reveal = '%s', " .
             "points = %d, points_override = '%s', game_term = '%s', " .
             "game_term_override = '%s', active = %d, email_message = '%s', " .
             "email_attachment = '%s' WHERE bid = %d",
             $form_state['values']['image'], $form_state['values']['title'],
             $form_state['values']['description'], $form_state['values']['difficulty'],
             $form_state['values']['formula'], $form_state['values']['reveal'],
             $form_state['values']['points'], $form_state['values']['points_override'],
             $form_state['values']['game_term'], $form_state['values']['game_term_override'],
             $form_state['values']['active'], $form_state['values']['email_message'],
             $form_state['values']['email_attachment'], $form_state['values']['bid']);
    drupal_set_message('Badge ' . $form_state['values']['title'] . ' Updated');
  }
  else {
    db_query("INSERT INTO sg_badges " .
             "(bid, image, title, description, difficulty, formula, reveal, points, points_override, game_term, game_term_override, active, email_message, email_attachment) " .
             "VALUES (NULL, '%s', '%s', '%s', '%s', '%s', '%s', '%d', '%s', '%s', '%s', '%d', '%s', '%s')",
             $form_state['values']['image'], $form_state['values']['title'],
             $form_state['values']['description'], $form_state['values']['difficulty'],
             $form_state['values']['formula'], $form_state['values']['reveal'],
             $form_state['values']['points'], $form_state['values']['points_override'],
             $form_state['values']['game_term'], $form_state['values']['game_term_override'],
             $form_state['values']['active'], $form_state['values']['email_message'],
             $form_state['values']['email_attachment']);
    drupal_set_message('Badge ' . $form_state['values']['title'] . ' Created');
  }

  drupal_goto('summergame/admin');
}

/**
 * PAGE: Administer Players
 */
function summergame_admin_players($search_term = '') {
  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');

  if ($search_term == 'new') {
    $content .= drupal_get_form('summergame_player_form');
  }
  else {
    $search_term = strtoupper($search_term);
    $params = array();
    $new_player = array();
    $sql = "SELECT sg_players.*, users.name AS username FROM sg_players LEFT JOIN users ON sg_players.uid = users.uid WHERE 1";

    if (is_numeric($search_term)) {
      // Search phone numbers
      $sql .= " AND sg_players.phone LIKE '%%%d%%'";
      $params[] = $search_term;
      $new_player['phone'] = $search_term;
    }
    else if (preg_match('/^S?[ART]G[\d]{5}$/', $search_term)) { //SRG12345, TG12345, AG12345
      $sql .= " AND sg_players.gamecard LIKE '%%%s%%'";
      $params[] = $search_term;
      $new_player['gamecard'] = $search_term;
    }
    else if ($search_term) {
      $sql .= " AND (sg_players.name LIKE '%%%s%%' OR sg_players.nickname LIKE '%%%s%%' OR users.name LIKE '%%%s%%')";
      $params[] = $search_term;
      $params[] = $search_term;
      $params[] = $search_term;
      $new_player['name'] = $search_term;
    }

    // Run the search
    $res = db_query($sql, $params);
    $count = mysqli_num_rows($res);

    // Rerun query with OR on terms if no results
    if ($count == 0 && strpos($search_term, ' ') !== FALSE) {
      $params = array();
      $sql = "SELECT sg_players.*, users.name AS username FROM sg_players LEFT JOIN users ON sg_players.uid = users.uid WHERE (0 ";
      foreach (explode(' ', $search_term) as $term) {
        $sql .= "OR sg_players.name LIKE '%%%s%%' OR sg_players.nickname LIKE '%%%s%%' OR users.name LIKE '%%%s%%'";
        $params[] = $term;
        $params[] = $term;
        $params[] = $term;
      }
      $sql .= ")";
      $res = db_query($sql, $params);
      $count = mysqli_num_rows($res);
    }

    $content .= '<div style="float: right">' .
                drupal_get_form('summergame_player_search_form', $search_term) .
                '</div>';
    $content .= "<h2>Your search returned $count match" . ($count == 1 ? '' : 'es') . "</h2>";


    if ($count == 0) {
      // No matches, create a new player
      drupal_set_message("No existing players to match your search \"$search_term\". Create a new player with that information below:");
      $content .= drupal_get_form('summergame_player_form', $new_player);
    }
    else if ($count > 100) {
      $content .= "<h2>Your search returned more than 100 matches: ($count)<h2>";
      $content .= "<h3>Please search again</h3>";
    }
    else {
      // Found 1-100 matches, display them in a table
      while ($player = db_fetch_array($res)) {
        // Prep for display
        $player['points'] = summergame_get_player_points($player['pid']);

        $show = array();
        if ($player['leaderboard']) {
          $show[] = 'Public Leaderboard';
        }
        if ($player['myscore']) {
          $show[] = 'Player Score Page';
        }
        if ($player['public']) {
          $show[] = 'Name Display';
        }
        $rows[] = array(
          'Edit' => '[' . l('edit', 'summergame/player/edit/' . $player['pid']). ']',
          'Real Name' => l($player['name'], 'summergame/player/' . $player['pid']),
          'Player Name' => $player['nickname'],
          'Web User' => ($player['uid'] ? l($player['username'], 'user/' . $player['uid']) : ''),
          'Phone' => $player['phone'] ? $player['phone'] : '',
          'Age Group' => $player['agegroup'],
          'Gamecard' => $player['gamecard'],
          'School' => $player['school'],
          'Grade' => $player['grade'] ? $player['grade'] : '',
          //'Show On' => implode(', ', $show),
          //'Point Total' => $player['points']['total'],
        );
      }
      $content .= theme('table', array_keys($rows[0]), $rows, array('id' => 'summergame-player-search-results'));
      $content .= '<ul><li class="button green">' . l("Create New Player", 'summergame/admin/players/new') . '</li></ul>';
    }
  }

  return $content;
}

/**
 * FORM: Player search form
 */
function summergame_player_search_form($form_state, $term = '') {
  $form = array();
  $form['inline'] = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['inline']['search_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Search for a Player'),
    '#size' => 32,
    '#maxlength' => 32,
    '#default_value' => $term,
  );
  $form['inline']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $form['hint'] = array(
    '#value' => '<p>' .
                '<em>Search by name, partial name, cell number, or game card number.<br />' .
                '(e.g. "Anne Arbor", "Arbor", "3274200", "SRG45678")</em>' .
                '</p>',
  );

  return $form;
}

function summergame_player_search_form_submit($form, &$form_state) {
  drupal_goto('summergame/admin/players/' . $form_state['values']['search_term']);
}

/**
 * FORM: Redeem a game code
 */
function summergame_redeem_form($form_state, $player) {

  $form = array();
  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $player['pid'],
  );
  $form['code_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Code Text'),
    '#size' => 32,
    '#maxlength' => 255,
    '#default_value' => ($_GET['text'] ? $_GET['text'] : ''),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $all_players = summergame_player_load_all($player['uid']);
  if (count($all_players) > 1) {
    $pid_options = array();
    if ($_SESSION['summergame_pid_defaults']) {
      $pid_defaults = json_decode($_SESSION['summergame_pid_defaults']);
    }
    else {
      $pid_defaults = array($player['pid']);
    }
    foreach ($all_players as $user_player) {
      $pid_options[$user_player['pid']] = ($user_player['nickname'] ? $user_player['nickname'] : $user_player['name']);
    }
    $form['pids'] = array(
      '#type' => 'checkboxes',
      '#options' => $pid_options,
      '#default_value' => $pid_defaults,
      '#title' => 'Redeem for players',
      '#prefix' => '<div class="container-inline">',
      '#suffix' => '</div>',
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['cancel'] = array(
    '#value' => l('Cancel', 'summergame/player/' . $player['pid']),
  );

  return $form;
}

function summergame_redeem_form_submit($form, &$form_state) {
  $pids = array();
  if (is_array($form_state['values']['pids'])) {
    foreach ($form_state['values']['pids'] as $pid => $selected) {
      if ($pid == $selected) {
        $pids[] = $pid;
      }
    }
    $_SESSION['summergame_pid_defaults'] = json_encode($pids);
  }
  else {
    $pids[] = $form_state['values']['pid'];
  }

  foreach ($pids as $pid) {
    $status = summergame_redeem_code($pid, $form_state['values']['code_text']);
    if ($status['error']) {
      drupal_set_message($status['error'], 'error');
    }
    else if ($status['warning']) {
      drupal_set_message($status['warning'], 'warning');
    }
    else if ($status['success']) {
      drupal_set_message($status['success']);
    }
  }
  drupal_goto('summergame/player/' . $form_state['values']['pid']);
}

/**
 * FORM: Report consumption of media
 */
function summergame_consume_form($form_state, $pid, $bnum = 0) {
  $locum = sopac_get_locum();
  $form = array();
  $bib = array();

  if ($bnum) {
    if ($bib = $locum->get_bib_item($bnum)) {
      $form['bib'] = array(
        '#type' => 'value',
        '#value' => $bib,
      );
      $title = title_case($bib['title']);
      if ($bib['title_medium']) {
        $title .= ' ' . title_case($bib['title_medium']);
      }
      $finished_default = 1;
    }
  }

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );
  $form['mat_code'] = array(
    '#type' => 'select',
    '#title' => t("I've been enjoying this"),
    '#default_value' => $bib['mat_code'],
    '#options' => $locum->locum_config['formats'],
    '#prefix' => "<div class=\"container-inline\">",
    '#suffix' => "</div>",
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Titled'),
    '#default_value' => $title,
    '#size' => 64,
    '#maxlength' => 128,
    '#description' => t('Title of the Book/Movie/Music that you are reporting'),
    '#required' => TRUE,
  );
  $form['duration'] = array(
    '#type' => 'textfield',
    '#title' => t('for this many minutes or pages (optional)'),
    '#size' => 16,
    '#maxlength' => 16,
    '#description' => t('Enter the # of pages OR the length in minutes for 1 point per page or minute! (Maximum 500 points)'),
  );
  $form['finished'] = array(
    '#type' => 'checkbox',
    '#title' => 'and I finished it!',
    '#default_value' => $finished_default,
    '#description' => 'check this box to receive a 100 point bonus for finishing this item (optional)',
  );
  $form['inline'] = array(
    '#prefix' => "<div class=\"container-inline\">",
    '#suffix' => "</div>",
  );
  $form['inline']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Score!'),
  );
  $form['inline']['cancel'] = array(
    '#value' => l('Cancel', 'summergame/player/' . $pid),
  );

  return $form;
}

function summergame_consume_form_submit($form, &$form_state) {
  $points = 0;
  $pid = $form_state['values']['pid'];
  $title = $form_state['values']['title'];
  $description = $title;
  $metadata = array('mat_code' => $form_state['values']['mat_code'],
                    'daily_limit' => 1000);

  if ($form_state['values']['bib']) {
    // Use the trusted bnum as the id instead of a user-entered id
    $metadata['bnum'] = $form_state['values']['bib']['bnum'];
  }
  else if ($form_state['values']['id']) {
    $metadata['id'] = $form_state['values']['id'];
  }
  // Duration score
  if ($form_state['values']['duration']) {
    $points += min($form_state['values']['duration'], 500);
  }
  // Finish score
  if ($form_state['values']['finished']) {
    $points += 100;
  }
  $points = summergame_player_points($pid, $points, 'Read Watched Listened', $description, $metadata);
  drupal_set_message("Earned $points points for $title");
  drupal_goto('summergame/player/' . $pid);
}

/**
 * FORM: Player information
 */
function summergame_player_form($form_state, $player = NULL) {
  drupal_add_js(drupal_get_path('module', 'summergame') . '/summergame.player.js');

  $form = array();

  if ($player['pid']) {
    $form['pid'] = array(
      '#type' => 'value',
      '#value' => $player['pid'],
    );
    if (!$player['gamecard']) {
      $game_term = variable_get('summergame_current_game_term', '');
      $signup = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d AND type = 'Signup' AND game_term = '$game_term'", $player['pid']));
      if (!$signup->lid) {
        $form['signup_eligible'] = array(
          '#type' => 'value',
          '#value' => TRUE,
        );
      }
    }
    $form['title'] = array(
      '#value' => '<p style="float: right">' .
                  l('Back to Player Score Card page', 'summergame/player/' . $player['pid']) .
                  '</p>' .
                  '<h1>Edit Summer Game Player Information</h1>',
    );
    $submit_text = 'Save Player Changes';
  }
  else {
    $form['title'] = array(
      '#value' => '<h1>Summer Game Player Signup</h1>',
    );
    $submit_text = 'Sign Up!';
  }

  $form['buttons'] = array(
    '#prefix' => '<div class="summergame-player-edit-buttons">',
    '#suffix' => '</div>',
  );
  if ($player['pid']) {
    $form['buttons']['delete'] = array(
      '#prefix' => '<div class="summergame-player-delete-link">',
      '#suffix' => '</div>',
      '#value' => l('Delete Player', 'summergame/player/delete/' . $player['pid']),
    );
  }
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t($submit_text),
    '#attributes' => array('onClick' => 'resetDirty()'),
  );

  if ($player['pid']) {
    $cancel_path = 'summergame/player/' . $player['pid'];
  }
  else if (strpos($_GET['q'], 'admin') !== FALSE) {
    $cancel_path = 'summergame/admin';
  }
  else {
    $cancel_path = '<front>';
  }
  $form['buttons']['cancel'] = array(
    '#value' => l('Cancel', $cancel_path),
  );

  if ($player['pid'] && user_access('administer summergame')) {
    $form['admin'] = array(
      '#prefix' => '<fieldset style="float:right"><legend>STAFF ONLY</legend>',
      '#suffix' => '</fieldset>',
    );

    $form['admin']['merge_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Merge this player into Player ID'),
      '#size' => 8,
      '#maxlength' => 8,
      '#description' => t("Enter another Player ID number to merge this player infomation into that player record"),
      '#prefix' => "<fieldset class=\"collapsible collapsed\"><legend>MERGE PLAYER</legend>",
      '#suffix' => "</fieldset>",
    );
  }

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $player['name'],
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Enter your real name'),
    '#required' => TRUE,
  );
  $form['nickname'] = array(
    '#type' => 'textfield',
    '#title' => t('Nickname'),
    '#default_value' => $player['nickname'],
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Enter an optional nickname (will be used for public display if allowed)'),
  );
  if (user_access('administer summergame')) {
    $form['phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone Number'),
      '#default_value' => $player['phone'],
      '#size' => 30,
      '#maxlength' => 64,
      '#description' => t('Enter a phone number to play by text message (rates may apply)'),
    );
  }
  else if ($player['phone']) {
    $form['phone'] = array(
      '#type' => 'value',
      '#value' => $player['phone'],
    );
  }
/*
  $form['gamecard'] = array(
    '#type' => 'textfield',
    '#title' => t('Summer Game Card Number'),
    '#default_value' => $player['gamecard'],
    '#size' => 16,
    '#maxlength' => 16,
    '#description' => t('Did you pick up a score card? Enter its number here to help us track your progress'),
  );
  // Enter a referral code if eligible
  if (summergame_referral_available($player)) {
    $form['referred_by'] = array(
      '#type' => 'textfield',
      '#title' => t('Referred By'),
      '#size' => 16,
      '#maxlength' => 16,
      '#description' => t('Were you referred by a friend? Enter their referral code here to earn a point bonus for both of you!'),
    );
  }
*/
  // Set up privacy default values
  $privacy_defaults = array();
  if ($player['show_leaderboard']) {
    $privacy_defaults[] = 'show_leaderboard';
  }
  if ($player['show_myscore']) {
    $privacy_defaults[] = 'show_myscore';
  }
  if ($player['show_titles']) {
    $privacy_defaults[] = 'show_titles';
  }
  $form['privacy'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Privacy Options',
    '#options' => array(
      'show_leaderboard' => 'Show my nickname and total score on the public leaderboard',
      'show_myscore' => 'Allow others to see my summer game scores and awards page',
      'show_titles' => 'Display the titles of Books/Movies/Music on my Score Card for others to see',
    ),
    '#default_value' => $privacy_defaults,
    '#description' => 'Select what other people can see about your Summer Game progress',
  );
  $form['agegroup'] = array(
    '#type' => 'select',
    '#title' => t('Age Group'),
    '#default_value' => $player['pid'] ? $player['agegroup'] : 'adult',
    '#options' => array(
      'youth' => 'Youth',
      'teen' => 'Teen',
      'adult' => 'Adult'
    ),
    '#description' => 'Select your age group',
    '#attributes' => array('onChange' => 'checkForSchool(this)'),
  );
  if ($player['agegroup'] == 'youth' || $player['agegroup'] == 'teen') {
    $school_style = 'display: block';
  }
  else {
    $school_style = 'display: none';
  }

  $form['school_info'] = array(
    '#prefix' => '<div id="school-details-div" style="' . $school_style . '">',
    '#suffix' => '</div>',
  );
  $school_autocomplete = array();
  $res = db_query('SELECT name FROM sg_schools ORDER BY name ASC');
  while ($school = db_fetch_object($res)) {
    $school_autocomplete[] = $school->name;
  }
  $form['school_info']['school'] = array(
    '#type' => 'autocomplete',
    '#data' => $school_autocomplete,
    '#title' => t('School'),
    '#default_value' => $player['school'],
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Are you a student? Please enter the name of your school to help us know'),
  );
  $form['school_info']['grade'] = array(
    '#type' => 'select',
    '#title' => t('Grade'),
    '#default_value' => $player['grade'],
    '#options' => array(
      '' => 'N/A',
      -1 => 'Preschool',
      0  => 'Kindergarten',
      1  => '1st Grade',
      2  => '2nd Grade',
      3  => '3rd Grade',
      4  => '4th Grade',
      5  => '5th Grade',
      6  => '6th Grade',
      7  => '7th Grade',
      8  => '8th Grade',
      9  => '9th Grade',
      10 => '10th Grade',
      11 => '11th Grade',
      12 => '12th Grade',
    ),
    '#description' => t('Please let us know your upcoming grade if you\'re a student'),
  );

  if (user_access('administer users')) {
    if ($summergame_user_search_path = variable_get('summergame_user_search_path', FALSE)) {
      $search_link = ' (' . l('Search for user accounts if needed', $summergame_user_search_path) . ')';
    }
    $form['uid'] = array(
      '#type' => 'textfield',
      '#title' => t('User ID'),
      '#default_value' => $player['uid'],
      '#size' => 8,
      '#maxlength' => 8,
      '#description' => t("Website User ID to connect this player") . $search_link,
    );
  }
  else if ($player['uid']) {
    $form['uid'] = array(
      '#type' => 'value',
      '#value' => $player['uid'],
    );
  }

  $form['buttons2'] = $form['buttons'];

  return $form;
}

function summergame_referral_available($player) {
  $available = TRUE;

  if ($player['pid']) {
    // Check if they signed up in the current season
    $signup = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d AND type = 'Signup'", $player['pid']));
    if ($signup->game_term == variable_get('summergame_current_game_term', '')) {
      // Check if they've already received a referral bonus
      $referred = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d AND metadata LIKE '%referred_by:%'", $player['pid']));
      if ($referred->lid) {
        $available = FALSE;
      }
    }
    else {
      $available = FALSE;
    }
  }

  return $available;
}

function summergame_player_form_submit($form, &$form_state) {
  // Check for merge ID
  if ($form_state['values']['pid'] && $form_state['values']['merge_id']) {
    drupal_goto('summergame/admin/players/merge/' . $form_state['values']['merge_id'] . '/' . $form_state['values']['pid']);
  }

  $player_info = array(
    'name' => $form_state['values']['name'],
    'nickname' => trim($form_state['values']['nickname']),
    'gamecard' => str_replace(' ', '', strtoupper($form_state['values']['gamecard'])),
    'agegroup' => $form_state['values']['agegroup'],
    'school' => $form_state['values']['school'],
    'phone' => 'NULL', // default, handled below
  );

  // Special field handling
  if ($form_state['values']['phone']) {
    $phone = preg_replace('/[^\d]/', '', $form_state['values']['phone']);
    if (strlen($phone) == 7) {
      // preface with local area code
      $phone = '1734' . $phone;
    }
    else if (strlen($phone) == 10) {
      // preface with a 1
      $phone = '1' . $phone;
    }
    $player_info['phone'] = $phone;
  }
  $player_info['grade'] = ($form_state['values']['grade'] == '' ? 'NULL' : $form_state['values']['grade']);

  foreach ($form_state['values']['privacy'] as $name => $value) {
    $player_info[$name] = ($value ? 1 : 0);
  }

  if ($form_state['values']['uid']) {
    $player_info['uid'] = $form_state['values']['uid'];
  }

  if ($form_state['values']['pid']) {
    $player_info['pid'] = $form_state['values']['pid'];

    if ($form_state['values']['signup_eligible'] && $form_state['values']['gamecard']) {
      $signup_bonus = TRUE;
    }
  }
  else {
    $signup_bonus = TRUE;
  }

  $player = summergame_player_save($player_info);

  if (variable_get('summergame_points_enabled', 0)) {
    if ($signup_bonus) {
      $points = summergame_player_points($player['pid'], 100, 'Signup',
                                         'Signed Up for the Summer Game');
      drupal_set_message("Earned $points Summer Game points for signing up!");
    }
/*
    // Check for referral bonus
    if ($form_state['values']['referred_by']) {
      // Check for referral player
      $referring_player = summergame_player_load(array('referral_code' => $form_state['values']['referred_by']));
      if ($referring_player['pid']) {
        // Make sure no one has already gotten points for this player
        $existing_bonus = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE metadata LIKE '%referred:%s%'", $player['pid']));
        if ($existing_bonus->points) {
          drupal_set_message('Sorry, you entered a Referral Code, but your player has already been awarded points for a referral.');
        }
        else {
          summergame_player_points($player['pid'], 500, 'Referral',
                                   'Referred by Player #' . $referring_player['pid'], 'referred_by:' . $referring_player['pid']);
          summergame_player_points($referring_player['pid'], 500, 'Referral',
                                   'Referral Bonus for Player #' . $player['pid'], 'referred:' . $player['pid']);
          drupal_set_message('You were referred by Player #' . $referring_player['pid'] . ' and you each earned a 500 point bonus!');
        }
      }
      else {
        drupal_set_message('Sorry, you entered a referral code, but no player with that code exists');
      }
    }
*/
  }

  drupal_goto('summergame/player/' . $player['pid']);
}

/**
 * FORM: Delete Player form
 */
function summergame_delete_player_form(&$form_state, $pid = 0) {
  if ($player = summergame_player_load(array('pid' => $pid))) {
    $form = array();
    $form['#player'] = $player;
    $player_name = ($player['nickname'] ? $player['nickname'] : $player['name']);
    $prompt = "Are you sure you want to delete player $player_name? All associated scores and badges will be deleted as well. ";

    return confirm_form(
      $form,
      $prompt,
      'summergame/player/' . $pid,
      $prompt . ' ' . t('This action cannot be undone.'),
      t('Delete'),
      t('Cancel'),
      'summergame_delete_player_form'
    );
  }
}

function summergame_delete_player_form_submit($form, &$form_state) {
  $player = $form['#player'];
  summergame_player_delete(array('pid' => $player['pid']));
  $player_name = ($player['nickname'] ? $player['nickname'] : $player['name']);
  drupal_set_message("Deleted player $player_name and all associated points and badges");
  drupal_goto('summergame/player');
}

/**
 * FORM: Delete score form
 */
function summergame_delete_score_form(&$form_state, $pid = 0, $lid = 0) {
  $ledger = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d AND lid = %d", $pid, $lid));

  // Cannot delete points that are protected (e.g. Shop points)
  if (strpos($ledger->metadata, 'delete:no') === 0) {
    drupal_set_message('Sorry, these points are protected and cannot be deleted', 'error');
    drupal_goto('summergame/player/' . $pid);
  }

  $form = array();
  $form['#ledger'] = $ledger;
  $description = trim(preg_replace('/[\w]+:[\w]+/', '', $ledger->description));
  $prompt = "Are you sure you want to delete $ledger->points points for \"$description\"?";

  return confirm_form(
    $form,
    $prompt,
    'summergame/player/' . $pid,
    $prompt . ' ' . t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel'),
    'summergame_delete_score_form'
  );
}

/**
 * FORM HANDLER: Delete score and return player to their page
 */
function summergame_delete_score_form_submit($form, &$form_state) {
  $ledger = $form['#ledger'];
  db_query("DELETE FROM sg_ledger WHERE lid = %d", $ledger->lid);
  drupal_set_message("Removed score worth $ledger->points from your player score card");
  drupal_goto('summergame/player/' . $ledger->pid);
}

/**
 * PAGE: Summer Game Player Account page
 */
function summergame_player_page($pid = 0) {
  // Redirect to the right domain
  if ($sg_did = variable_get('summergame_default_domain_id', FALSE)) {
    $summergame_domain = domain_load($sg_did);
    domain_goto($summergame_domain);
  }

  global $user;

  if ($user->uid && $pid === 'extra') {
    if ($user->player['pid']) {
      drupal_set_message("Use the form below to add an extra player to your website account for another person in your household. " .
                         "You will be able to enter game codes and report reading / listening / " .
                         "watching activities for points. You will be able to switch the active player on your " .
                         "website account to specify which player receives points for online activities such as " .
                         "commenting, tagging, or writing reviews. If you wish this " .
                         "player to have a separate website identity for these online activites, please log " .
                         "out and create a new website account before signing up for the Summer Game.");
      $new_player = array('uid' => $user->uid);
      $content = drupal_get_form('summergame_player_form', $new_player);
    }
    else {
      // If no player has signed up yet, redirect to the player page
      drupal_goto('summergame/player');
    }
  }
  else {
    $pid = intval($pid);

    if ($pid) {
      $player = summergame_player_load(array('pid' => $pid));
    }
    else if ($user->player['pid']) {
      // Default to the active player if none specified
      $player = $user->player;
    }

    if ($player) {
      $player_access = summergame_player_access($player['pid']);
      // Check if player's score card is private and we don't have access
      if (!$player['show_myscore'] && !$player_access) {
        drupal_set_message("Player #$pid's Score Card is private", 'error');
        drupal_goto('<front>');
      }

      // Update checkout history for logged in user
      if ($user->uid && $player['uid'] == $user->uid && $user->profile_cohist) {
        $ch_list = db_fetch_array(db_query("SELECT * FROM sopac_lists WHERE uid = %d AND title = 'Checkout History' LIMIT 1", $user->uid));
        if ($ch_list['list_id']) {
          include_once(drupal_get_path('module', 'sopac') . '/sopac_user.php');
          sopac_update_history($ch_list);
        }
      }

      $other_players = array();
      if ($player_access && $player['uid']) {
        $all_players = summergame_player_load_all($player['uid']);

        if (count($all_players) > 1) {
          foreach ($all_players as $extra_player) {
            if ($extra_player['pid'] != $player['pid']) {
              $other_players[] = $extra_player;
            }
          }
        }
      }

      $content .= theme('summergame_player_page', $player, $player_access, $other_players);

    }
    else {
      // invalid PID or not authorized
      if ($pid) {
        drupal_set_message('Invalid Player ID: ' . $pid, 'error');
        drupal_goto('<front>');
      }
      else {
        if ($user->uid) {
          $new_player = array('uid' => $user->uid);
          $content = drupal_get_form('summergame_player_form', $new_player);
        }
        else {
          if ($catalog_domain = variable_get('summergame_catalog_domain', '')) {
            $catalog_domain = 'https://' . $catalog_domain . '/';
          }
          drupal_set_message('You must log into a website account in order to access your Player page');
          drupal_goto($catalog_domain . 'login', array('destination' => 'summergame/player'));
        }
      }
    }
  }

  return $content;
}


/**
 * UTILITY: Theme player info table
 */
function theme_summergame_player_info($player) {
  $content .= '<div id="player-card">';

  // Link to Points Forms
  $content .= '<div id="player-earn-links">';
  $content .= '<h2>Earn Game Points</h2>';
  $content .= '<ul class="no-padding-left">';
  $content .= '<li class="button">' . l('I have a Game Code!', 'summergame/player/gamecode/' . $player['pid']) . '</li>';
  if (variable_get('summergame_points_enabled', 0)) {
    $content .= '<li class="button">' . l('I Read, Listened to, or Watched something!', 'summergame/player/consume/' . $player['pid']) . '</li>';
  }
  $content .= '</ul>';
  $content .= '</div>';

  // Points Summary
  $content .= '<div id="player-points-summary">';
  $summary_rows = array();
  $sg_balance = 0;
  foreach ($player['points'] as $game_term => $player_game_points) {
    if (is_array($player_game_points)) {
      $summary_rows[] = array(
        'Game' => l($game_term, '', array('fragment' => $game_term, 'external' => TRUE)),
        'Points' => array('data' => $player_game_points['total'], 'class' => 'digits'),
      );
      if (strpos($game_term, 'SummerGame') === 0) {
        $sg_balance += $player_game_points['balance'];
      }
    }
  }
  $summary_rows[] = array(
    'Game' => '<strong>Shop Balance</strong>',
    'Points' => array('data' => $sg_balance, 'class' => 'digits'),
  );

  $content .= '<h2>Points Summary</h2>';
  $content .= theme('table', array_keys($summary_rows[0]), $summary_rows);
  $content .= '</div>';

  // Translate privacy details
  $privacy_details .= '<ul>';
  if ($player['show_leaderboard']) {
    $privacy_details .= '<li>Show Nickname & Total Score on Public Leaderboard</li>';
  }
  if ($player['show_myscore']) {
    $privacy_details .= '<li>Show Player Page Score Card and Badges</li>';
  }
  if ($player['show_titles']) {
    $privacy_details .= '<li>Show Titles of Books/Movies/Music in the Score Card</li>';
  }
  $privacy_details .= '</ul>';

  // Determine Classic Reading Game status
  $completion_gamecode = variable_get('summergame_completion_gamecode', '');
  $row = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d AND metadata LIKE '%gamecode:$completion_gamecode%'", $player['pid']));
  if ($row->lid) {
    $completed_classic = 'Yes, completed on ' . date('F j, Y', $row->timestamp);
  }
  else {
   $completed_classic = 'Not yet! Complete a game card and visit the library to receive a special prize.';
  }

  // List teams
  $teams = array();
  $res = db_query("SELECT * FROM sg_players_teams, sg_teams " .
                  "WHERE sg_players_teams.tid = sg_teams.tid " .
                  "AND sg_players_teams.pid = %d", $player['pid']);
  while ($team = db_fetch_array($res)) {
    $teams[] = l($team['name'], 'summergame/team/' . $team['tid']);
  }
  $teams[] = '[ ' . l('See List of Teams', 'summergame/teams') . ' ]';
  $player['teams'] = implode(', ', $teams);

  // Show cell phone options
  if (preg_match('/^[\d]{6}$/', $player['phone'])) {
    // Waiting for cell phone attachment
    $char = chr(($player['pid'] % 26) + 65);
    $player['phone'] = 'TEXT ' . $char . $player['phone'] . ' to 4AADL (42235) to connect your phone';
  }
  else if (!$player['phone']) {
    $player['phone'] = l('GENERATE CODE', 'summergame/player/gcpc/' . $player['pid']) . ' to attach your cell phone to your player.';
  }
/*
  // Show referral code information
  if ($player['referral_code']) {
    $player['referral_code'] = 'Earn 500 points by having a friend sign up as a new player for the game with code: <strong>' . $player['referral_code'] . '</strong>';
  }
  else {
    $player['referral_code'] = l('GENERATE CODE', 'summergame/player/grc/' . $player['pid']) . ' to earn bonus points by referring friends to sign up for the game.';
  }
*/
  // Show Game Card information
  $player['gamecard'] = 'Print to complete the Classic Reading Game: ';
  $player['gamecard'] .= ' [' . l('Adult/Teen', 'summergame/pdf/adult',
                                  array('attributes' => array('target' => '_blank'))) . ' | ' .
                                l('Youth Card', 'summergame/pdf/youth',
                                  array('attributes' => array('target' => '_blank'))) . ']';

  $player_table = array(
    array('<strong>Real Name:</strong>', $player['name']),
    array('<strong>Nickname:</strong>', $player['nickname']),
    array('<strong>Cell Phone:</strong>', $player['phone']),
//  array('<strong>Referral Code:</strong>', $player['referral_code']),
    array('<strong>Game Card:</strong>', $player['gamecard']),
    array('<strong>Age Group:</strong>', ucwords($player['agegroup'])),
    array('<strong>Privacy Options:</strong>', $privacy_details),
    array('<strong>Completed Classic Reading Game?:</strong>', $completed_classic),
    array('<strong>Team Membership:</strong>', $player['teams']),
  );

  // Lookup drupal user if admin
  if (user_access('administer summergame')) {
    if ($account = user_load(array('uid' => $player['uid']))) {
      $player_table[] = array(
        '<strong>Website User:</strong>',
        user_access('administer users') ? l($account->name, 'user/' . $account->uid) : $account->name,
      );
    }
  }

  $header = array(
    'Player Details',
    array(
      'data' => '[ ' . l('Edit Player Info', 'summergame/player/edit/' . $player['pid']) . ' ]',
      'style' => 'text-align: right',
    ),
  );

  $content .= '<div id="player-info-table">';
  //$content .= '<h2>Player Details:</h2>';
  $content .= theme('table', $header, $player_table);
  $content .= '</div>';

  $content .= '</div>'; // #player-card

  return $content;
}

function theme_summergame_player_page($player, $player_access) {
  global $user;
  $player['points'] = summergame_get_player_points($player['pid']);
  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
  $playername = $player['pid'] . ': ' . ($player['nickname'] ? $player['nickname'] : $player['name']);

  $content .= '<div id="summergame-player-page">';
  $content .= "<h1>Summer Game Player #$playername (" . $player['points']['career'] . " career points)</h1>";

  if ($player['uid'] == $user->uid) {
    $content .= "<p><em>That's you!</em> ";
    $extra_link = l('Sign up an extra player', 'summergame/player/extra');
    $content .= "Want to record another player's reading/listening/watching activity and game codes? $extra_link.</p>";
  }

  // Player Details
  if ($player_access) {
    // Extra Players if player has web account
    if ($player['uid']) {
      $all_players = summergame_player_load_all($player['uid']);
      // pop first player off the list to determine primary player
      $primary_player = array_shift($all_players);

      if (count($all_players)) {
        if ($player['pid'] == $primary_player['pid']) {
          // We're on the primary player page
          foreach ($all_players as $extra_player) {
            if ($extra_player['pid'] != $player['pid']) {
              // Show Extra Player Info
              $extra_player['points'] = summergame_get_player_points($extra_player['pid']);
              $extra_playername = $extra_player['nickname'] ? $extra_player['nickname'] : $extra_player['name'];
              $extra_playername = l($extra_playername, 'summergame/player/' . $extra_player['pid']);
              $content .= '<div id="summergame-extra-player">';
              $content .= "<h1>Extra Player: $extra_playername (" . $extra_player['points']['career'] . " career points)</h1>";
              $content .= '<p>[ ' . l('MAKE ACTIVE', 'summergame/player/' . $extra_player['pid'] . '/setactive') . ' ]</p>';
              //$content .= theme_summergame_player_info($extra_player);
              $content .= '</div>';
            }
          }
        }
        else {
          // We're on an extra player page
          $content .= '<p>[ ' . l('Return to main player page', 'summergame/player/' . $primary_player['pid']) . ' ]</p>';
        }
      }
    }
    $content .= theme_summergame_player_info($player);
  }

  // Player Score //////////////////////////////////////////////////////////
  foreach ($player['points'] as $game_term => $player_game_points) {
    if (is_array($player_game_points)) {
      $content .= '<div class="scorecard">';
      $content .= "<h2 class=\"title\"><a name=\"$game_term\">$game_term Scorecard</a></h2>";

      // Points
      $content .= '<div class="player-points">';
      $content .= '<h3>Points</h3>';
      $type_rows = array();
      foreach ($player_game_points['types'] as $type => $type_points) {
        $type_rows[] = array($type, array('data' => $type_points, 'class'=> 'digits'));
      }
      $type_rows[] = array('<strong>TOTAL POINTS EARNED</strong>',
                           array('data' => '<strong>' . $player_game_points['total'] . '</strong>',
                                 'class' => 'digits'));
      if (strpos($game_term, 'SummerGame') === 0) {
        $type_rows[] = array('<strong>Current Points Balance</strong>',
                             array('data' => '<strong>' . $player_game_points['balance'] . '</strong>',
                                   'class' => 'digits'));
      }

      $content .= theme('table', array('Type', 'Points'), $type_rows);

      $content .= '<ul class="scorecard-buttons">' .
                  '<li class="button">' .
                  l('See Full Scorecard', 'summergame/player/ledger/' . $player['pid'],
                    array('query' => array('term' => $game_term))) .
                  '</li>' .
                  '</ul>';

      // Date Ranges
      $latest = reset($player_game_points['ledger']);
      $earliest = end($player_game_points['ledger']);
      $content .= '<p>Points date range: <br />' .
                  date('F j, Y, g:i a', $earliest['timestamp']) . ' - <br />' .
                  date('F j, Y, g:i a', $latest['timestamp']) .
                  '</p>';

      $content .= '</div>';

      // Badges
      $content .= '<div class="player-badges">';
      $content .= '<h3>Badges</h3>';
      $sg_image_path = base_path() . file_directory_path() . '/sg_images/';
      $badge_grid = '';
      if (count($player_game_points['badges'])) {
        foreach ($player_game_points['badges'] as $badge) {
          $badge_grid .= theme_summergame_badge($badge['bid']);
        }
        $content .= $badge_grid;
      }
      else {
        $content .= "<p>This player hasn't earned any $game_term badges yet.</p>";
      }

      $content .= '<p>[ ' . l("See All $game_term Badges", 'summergame/badges/' . $game_term) . ' ]</p>';
      $content .= '</div>';

      $content .= '<div style="clear:both"></div>';
      $content .= '</div>'; // .scorecard
    }
  }
  $content .= '</div>'; // #summergame-player-page

  return $content;
}

function summergame_player_ledger_page($pid = 0) {
  global $user;
  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
  $pid = intval($pid);

  if ($pid) {
    $player = summergame_player_load(array('pid' => $pid));
  }
  else if ($user->uid) {
    // Default to the logged in player if none specified
    $player = $user->player;
  }

  if ($player) {
    $locum = sopac_get_locum();
    $player_access = summergame_player_access($player['pid']);

    if (!$player['show_myscore'] && !$player_access) {
      drupal_set_message("Player #$pid's Score Card is private", 'error');
      drupal_goto('<front>');
    }

    $rows_per_page = 100;
    $rows = array();
    $args = array($player['pid']);
    if ($_GET['term']) {
      $term_query = " AND game_term = '%s'";
      $args[] = $_GET['term'];
    }

    $locum = sopac_get_locum();
    if ($catalog_domain = variable_get('summergame_catalog_domain', '')) {
      $catalog_domain = 'http://' . $catalog_domain . '/';
    }

    $result = pager_query("SELECT * FROM sg_ledger WHERE pid = %d $term_query ORDER BY timestamp DESC",
                          $rows_per_page, 0, NULL, $args);
    while ($row = db_fetch_array($result)) {
      // Change bnum: code to a link to the bib record
      if (preg_match('/bnum:([\w-]+)/', $row['metadata'], $matches)) {
        if (preg_match('/^\d{7}$/', $matches[1])) {
          $row['description'] = '<img src="http://media.aadl.org/covers/' . $matches[1] . '_50.jpg"> ' . $row['description'];
        }
        if ($row['type'] != 'Download of the Day' || $player_access) { // Don't link to DotD records
          $row['description'] = l($row['description'],
                                  $catalog_domain . 'catalog/record/' . $matches[1],
                                  array('html' => TRUE));
        }
      }
      // Translate material code to catalog material type
      if (preg_match('/mat_code:([a-z])/', $row['metadata'], $matches)) {
        $row['description'] = 'Points for ' . $locum->locum_config['formats'][$matches[1]] .
                              ', ' . $row['description'];
      }
      // handle game codes
      if (preg_match('/gamecode:([\w]+)/', $row['metadata'], $matches)) {
        if ($player_access) {
          $row['type'] .= ': ' . $matches[1];
        }
        else {
          // Check if there is a hint for this game code
          $hint_row = db_fetch_object(db_query("SELECT hint FROM sg_game_codes WHERE text = '%s'", $matches[1]));
          if ($hint_row->hint) {
            $row['description'] = $hint_row->hint;
          }
        }
      }
      // link to nodes
      if (preg_match('/nid:([\d]+)/', $row['metadata'], $matches)) {
        if ($row['type'] != 'Download of the Day' || $player_access) { // Don't link to DotD records
          $node = node_load($matches[1]);
          $row['description'] .= ': ' . l($node->title, 'node/' . $node->nid);
          // and link to comment
          if (preg_match('/cid:([\d]+)/', $row['metadata'], $matches)) {
            $row['description'] .= ' (' .
                                   l('See comment', 'node/' . $node->nid,
                                     array('fragment' => 'comment-' . $matches[1])) .
                                   ')';
          }
        }
      }

      $table_row = array(
        'Date' => date('F j, Y, g:i a', $row['timestamp']),
        'Type' => $row['type'],
        'Description' => ($player['show_titles'] || $player_access ? $row['description'] : ''),
        'Points' => array('data' => $row['points'], 'class' => 'digits'),
      );
      if ($player_access) {
        if (strpos($row['metadata'], 'delete:no') === 0) {
          // No delete link for protected points
          $table_row['Remove?'] = '';
        }
        else {
          $table_row['Remove?'] = l('DELETE', 'summergame/player/deletescore/' . $player['pid'] . '/' . $row['lid']);
        }
      }
      $score_table[] = $table_row;
    }

    if (count($score_table)) {
      $content .= '<h2 class="title">' .
                'Player Points: ' .
                '</h2>';
      $pager = theme('pager', NULL, $rows_per_page, 0);
      $content .= $pager .  theme('table', array_keys($score_table[0]), $score_table) . $pager;
    }
    else {
      $content .= '<p>No Scores Found</p>';
    }
  }

  return $content;
}

/**
 * PAGE: Player Edit page
 */
function summergame_player_edit_page($pid = 0) {
  $pid = intval($pid);
  if ($pid) {
    drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
    $player = summergame_player_load(array('pid' => $pid));
    $content .= drupal_get_form('summergame_player_form', $player);
  }
  else {
    drupal_goto('summergame/player');
  }

  return $content;
}

/**
 * PAGE: Generate Cell Phone Code
 */
function summergame_player_gcpc($pid = 0) {
  if ($player = summergame_player_load(array('pid' => $pid))) {
    if (!$player['phone']) {
      // Generate a new cell phone code
      $code = 0;
      while ($code == 0) {
        $code = rand(100000, 999999);
        $collision = db_fetch_object(db_query("SELECT pid FROM sg_players WHERE phone = %d", $code));
        if ($collision->pid) {
          $code = 0;
        }
      }
      $player['phone'] = $code;
      summergame_player_save($player);
      $char = chr(($player['pid'] % 26) + 65);
      drupal_set_message('TEXT ' . $char. $code . ' to 4AADL (42235) to connect your phone');
    }
    drupal_goto('summergame/player/' . $player['pid']);
  }
  drupal_goto('summergame/player');
}

/**
 * PAGE: Generate Referral Code
 */
function summergame_player_grc($pid = 0) {
  if ($player = summergame_player_load(array('pid' => $pid))) {
    if (!$player['referral_code']) {
      // Generate a new referral code
      $nums = '34679';
      $chars = 'ACDEFGHJKMNPQRTUVWXY';
      $num_max_idx = strlen($nums) - 1;
      $char_max_idx = strlen($chars) - 1;
      $code = '';
      while ($code == '') {
        for ($i = 0; $i < 4; $i++) {
          $code .= $nums[mt_rand(0, $num_max_idx)];
          $code .= $chars[mt_rand(0, $char_max_idx)];
        }
        $collision = db_fetch_object(db_query("SELECT pid FROM sg_players WHERE referral_code = '%s'", $code));
        if ($collision->pid) {
          $code = '';
        }
      }
      $player['referral_code'] = $code;
      summergame_player_save($player);
      drupal_set_message('Your play.aadl.org Referral Code is  ' . $code . '. Earn bonus points when an Lcard-holding friend enters that code on the registration page.');
    }
    drupal_goto('summergame/player/' . $player['pid']);
  }
  drupal_goto('summergame/player');
}

/**
 * PAGE: Game Code Redeem Page
 */
function summergame_player_redeem_page($pid = 0) {
  if ($pid) {
    if (summergame_player_access($pid)) {
      $player = summergame_player_load(array('pid' => $pid));
    }
    else {
      drupal_set_message("Invalid ID or no access for player #$pid", 'error');
      drupal_goto('summergame/player');
    }
  }
  else {
    // try to default to the logged in player
    global $user;
    $player = $user->player;
    if (empty($player)) {
      drupal_set_message("No player found for your logged in account", 'error');
      drupal_goto('summergame/player');
    }
  }

  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
  $content .= '<h1>Redeem a Game Code for ' . ($player['nickname'] ? $player['nickname'] : $player['name']) . '</h1>';
  $content .= '<p>You can find game codes for attending events, or by finding them around the library.</p>';
  $content .= drupal_get_form('summergame_redeem_form', $player);

  return $content;
}

/**
 * PAGE: Game Code Redeem Page
 */
function summergame_player_consume_page($pid = 0, $bnum = 0) {
  if (variable_get('summergame_points_enabled', 0)) {
    if ($pid) {
      if (summergame_player_access($pid)) {
        $player = summergame_player_load(array('pid' => $pid));
      }
      else {
        drupal_set_message("Invalid ID or no access for player #$pid", 'error');
        drupal_goto('summergame/player');
      }
    }
    else {
      // try to default to the logged in player
      global $user;
      $player = $user->player;
      if (empty($player)) {
        drupal_set_message("No player found for your logged in account", 'error');
        drupal_goto('summergame/player');
      }
    }

    $content .= '<h1>Score Points for ' . ($player['nickname'] ? $player['nickname'] : $player['name']) . ':</h1>';
    $content .= '<p>Did you read a book, listen to a CD, or watch a DVD? Enjoyed another item? Report it here to earn points:</p>';
    $content .= '<p><em>HINT: If you are reporting an item from our catalog, click the "I FINISHED THIS" button on the full catalog page to automatically fill this form.</em></p>';
    $content .= drupal_get_form('summergame_consume_form', $player['pid'], $bnum);
  }
  else {
    drupal_set_message("Sorry, earning Summer Game points for finishing items isn't active at this time.");
    drupal_goto('summergame/player');
  }

  return $content;
}

/**
 * UTILITY: Get array of all Game Terms
 */
function summergame_get_game_terms() {
  require_once(variable_get('summergame_libphp_path', '') . 'contrib/redisent/redisent.php');
  $redis = new Redisent('multivac');
  $terms = array();
  global $base_url;
  $game_term_key = $base_url . ':sg_game_terms';

  if ($term_string = $redis->get($game_term_key)) {
    $terms = explode(',', $term_string);
  }
  else {
    $terms = array();
    $res = db_query('SELECT DISTINCT game_term FROM `sg_ledger` ORDER BY game_term ASC');
    while ($row = db_fetch_object($res)) {
      $terms[] = $row->game_term;
    }
    $redis->set($game_term_key, implode(',', $terms));
    $redis->expire($game_term_key, 300); // 5 minutes
  }

  return $terms;
}

/**
 * PAGE: Leaderboard Page
 */
function summergame_leaderboard_page() {
  $type = $_GET['type'];
  $range = $_GET['range'];
  $staff = $_GET['staff'];
  $team = $_GET['team'];
  $rows = ($_GET['rows'] ? $_GET['rows'] : 500);

  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
  $args = array();

  // Switch for staff
  $staff_rid = variable_get('summergame_staff_role_id', '');

  if ($staff_rid) {
    if ($staff) {
      $lb_title .= 'Staff ';
      $staff_query = " AND users_roles.rid = $staff_rid ";
    }
    else {
      $staff_query = ' AND users_roles.rid IS NULL ';
    }
  }

  // Determine type
  $terms = summergame_get_game_terms();
  $game_term = variable_get('summergame_current_game_term', '');
  $type = (in_array($type, $terms) ? $type : $game_term);
  if ($type) {
    $type_query = 'AND sg_ledger.game_term LIKE "%s" ';
    $args[] = $type;
    $lb_title .= $type;
  }
  else {
    $type_query = '';
    $lb_title .= 'Career';
  }

  $lb_title .= ' Leaderboard';

  // Determine range
  if ($range == 'day') {
    $range_query = 'AND sg_ledger.timestamp > ' . (time() - (60 * 60 * 24)) . ' ';
    $lb_title .= ' for Today (Last 24 hours)';
  }
  else if ($range == 'week') {
    $range_query = 'AND sg_ledger.timestamp > ' . (time() - (60 * 60 * 24 * 7)) . ' ';
    $lb_title .= ' for This Week (Last 7 Days)';
  }
  else {
    $range_query = '';
    $lb_title .= ' for All Time';
  }

  $args[] = $rows;
  $leaderboard = array();
  if ($team) {
    // Show the Team leaderboard
    $lb_title = 'Team ' . $lb_title;

    $res = db_query('SELECT *, SUM(points) AS lb_total ' .
                    'FROM sg_ledger, sg_players_teams, sg_teams ' .
                    "WHERE sg_ledger.metadata NOT LIKE '%%leaderboard:no%%' " .
                    'AND sg_ledger.pid = sg_players_teams.pid ' .
                    'AND sg_players_teams.tid = sg_teams.tid ' .
                    $type_query .
                    $range_query .
                    'GROUP BY sg_players_teams.tid ' .
                    'ORDER BY lb_total DESC ' .
                    'LIMIT %d', $args);

    while ($lb_team = db_fetch_array($res)) {
      // Get player count for the team
      $players = db_fetch_array(db_query("SELECT COUNT(pid) AS p_count FROM sg_players_teams WHERE tid = %d", $lb_team['tid']));

      $leaderboard[] = array(
        'Place' => ++$place,
        'Team' => l($lb_team['name'], 'summergame/team/' . $lb_team['tid']),
        '# of Players' => array('data' => $players['p_count'], 'class' => 'digits'),
        'Total Score' => array('data' => $lb_team['lb_total'], 'class' => 'digits'),
        'Player Average' => array('data' => floor($lb_team['lb_total'] / $players['p_count']), 'class' => 'digits'),
      );
    }
  }
  else {
    $res = db_query('SELECT *, SUM(points) AS lb_total ' .
                    'FROM sg_ledger, sg_players ' .
                    "LEFT JOIN users_roles ON sg_players.uid = users_roles.uid AND users_roles.rid = $staff_rid " .
                    'WHERE sg_players.pid = sg_ledger.pid ' .
                    "AND sg_ledger.metadata NOT LIKE '%%leaderboard:no%%' " .
                    $type_query .
                    $range_query .
                    $staff_query .
                    'GROUP BY sg_players.pid ' .
                    'ORDER BY lb_total DESC ' .
                    'LIMIT %d', $args);

    while ($lb_player = db_fetch_array($res)) {
      if ($lb_player['show_leaderboard']) {
        $player_name = $lb_player['nickname'] ? $lb_player['nickname'] : $lb_player['name'];
      }
      else {
        $player_name = 'Player #' . $lb_player['pid'];
      }
      if ($lb_player['show_myscore'] || user_access('administer summergame')) {
        $player_name = l($player_name, 'summergame/player/' . $lb_player['pid']);
      }
      $leaderboard[] = array(
        'Place' => ++$place,
        'Player' => $player_name,
        'Total Score' => array('data' => $lb_player['lb_total'], 'class' => 'digits'),
      );
    }
  }

  //$pager = theme('pager', NULL, $rows, 0);

  $content .= "<h1>$lb_title</h1>";
  if (count($leaderboard)) {
    $content .= $pager . theme('table', array_keys($leaderboard[0]), $leaderboard) . $pager;
  }
  else {
    $content .= "<p>No scores found</p>";
  }

  return $content;
}

/**
 * PAGE: Badges Page
 */
function summergame_badges_page($game_term = '') {
  $sg_image_path = base_path() . file_directory_path() . '/sg_images/';
  $rows = array();
  if ($game_term) {
    $res = db_query("SELECT * FROM sg_badges WHERE game_term = '%s' ORDER BY title ASC", $game_term);
  }
  else {
    $res = db_query("SELECT * FROM sg_badges ORDER BY title ASC");
  }
  while ($badge = db_fetch_array($res)) {
    if ($game_term) {
      if ($game_term == $badge['game_term']) {
        $headline = $game_term;
      }
    }
    $row = array(
      'Image' => '<img src="' . $sg_image_path . $badge['image'] . '_100.png">',
      'Description' => '<strong>' . $badge['title'] . '</strong><p>' . $badge['description'] . '</p>',
    );
    if ($badge['points']) {
      $row['Description'] .= '<p><em>' . $badge['points'] . ' point bonus when earned</em></p>';
    }
    $rows[] = $row;
  }

  $content .= "<h1>$game_term Game Badges</h1>";
  $content .= theme('table', array(), $rows);

  return $content;
}

function summergame_badge_detail_page($bid) {
  // Redirect to the right domain
  if ($sg_did = variable_get('summergame_default_domain_id', FALSE)) {
    $summergame_domain = domain_load($sg_did);
    domain_goto($summergame_domain);
  }

  $badge = db_fetch_object(db_query("SELECT * FROM sg_badges WHERE bid = %d", $bid));

  if ($badge->bid) {
    global $user;
    drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');

    if ($user->player['pid']) {
      $player_badge_status .= '<p class="player-badge-status">';
      $earned = db_fetch_array(db_query("SELECT * FROM sg_players_badges WHERE pid = %d AND bid = %d", $user->player['pid'], $badge->bid));
      if ($earned['timestamp']) {
        $player_badge_status .= 'You received this badge on ' . date('F j, Y g:i A', $earned['timestamp']);

        $share_links .= '<div class="share-links">';

        $share_links .= '<div>Share your accomplishment:</div>';

        $share_links .= '<div class="twitter-share">';
        $share_links .= '<script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>';
        $share_links .= '<a href="http://twitter.com/share/?url=/" class="twitter-share-button" data-text="I earned the ' .
                                $badge->title . ' Badge in the @aadl Summer Game! ' . url($_GET['q'], array('absolute' => TRUE)) .
                                ' Play along at http://play.aadl.org/." data-count="none">Tweet</a>';
        $share_links .= '</div>';

        $share_links .= '<div class="facebook-share">';
        $share_links .= <<<FBL
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
<fb:like send="false" layout="standard" width="225" show_faces="true" colorscheme="light" action="like"></fb:like>
FBL;
        $share_links .= '</div>';

        $share_links .= '</div>';

        $player_badge_status .= $share_links;
      }
      else {
        $player_badge_status .= 'You have not yet earned this badge';
      }
      $player_badge_status .= '</p>';
    }

    // Handle hidden badges
    $hide_badge = FALSE;
    if ($badge->reveal) {
      if (count($user->player['bids'])) {
        $hidden_badge_titles = array();

        $required_bids = explode(',', $badge->reveal);
        foreach ($required_bids as $required_bid) {
          $required_badge = db_fetch_object(db_query("SELECT * FROM sg_badges WHERE bid = %d", $required_bid));
          $hidden_badge_titles[] = $required_badge->title;
          if (!$user->player['bids'][$required_bid]) {
            $hide_badge = TRUE;
            break;
          }
        }
        $hidden_details .= 'You must earn the following badge' .
                           (count($required_bids) == 1 ? '' : 's') .
                           ' to reveal this badge: ';
        $hidden_details .= implode(', ', $hidden_badge_titles);
      }
      else {
        // no player or player has no badges
        $hide_badge = TRUE;
      }

      if ($hide_badge) {
        $badge->image = 'hidden';
        $badge->title = 'Hidden Badge';
        $badge->description = $hidden_details;
      }
    }



    $badge_img_src = file_directory_path() . '/sg_images/' . $badge->image;
    if (file_exists($badge_img_src . '_400.png')) {
      $badge_img_src .= '_400.png';
    }
    else {
      $badge_img_src .= '_100.png';
    }
    $content .= '<div class="summergame-badge-detail">';
    $content .= '<div style="float: right; font-size: 0.75em;">[ <a href="javascript:location.reload(true)">refresh</a> ]</div>';
    $content .= l('<img src="' . base_path() . $badge_img_src . '">',
                  file_create_url($badge_img_src),
                  array('html' => TRUE));
    $content .= "<h1>$badge->title</h1>";
    $content .= "<p class=\"caption\">Difficulty: $badge->difficulty";
    if ($badge->game_term) {
      $content .= "<br>Part of the $badge->game_term Game";
    }
    $content .= "</p>";
    $content .= "<p><strong>$badge->description</strong></p>";
    if ($badge->points) {
      $term = ($badge->game_term_override ? $badge->game_term_override : $badge->game_term);
      $points = ($badge->points_override ? $badge->points_override : $badge->points);
      $content .= "<p><em>$points $term point bonus when earned</em></p>";
    }

    $awarded = db_fetch_object(db_query("SELECT COUNT(pid) AS pcount FROM sg_players_badges WHERE bid = %d", $bid));
    $content .= "<p>This badge has been awarded to $awarded->pcount players</p>";

    if (!$hide_badge) {
      $player_count = 0;
      if (preg_match('/^{([\d,]+)}$/', $badge->formula, $matches)) {
        // Badge collection badge
        $formula_type = ' badges earned';
        $bids = explode(',', $matches[1]);
        $total_count = count($bids);
        foreach ($bids as $bid) {
          $badge_list .= theme_summergame_badge($bid);
        }
        $badge_count = db_fetch_object(db_query("SELECT COUNT(bid) AS bid_count FROM sg_players_badges WHERE pid = %d AND bid IN (%s)",
                                                $user->player['pid'], $matches[1]));
        $player_count = $badge_count->bid_count;
      }
      else if (strpos($badge->formula, '::') !== FALSE) {
        // Multiple Badge
        list($total_count, $text_pattern) = explode('::', $badge->formula);
        $lid_count = db_fetch_object(db_query("SELECT COUNT(lid) AS lid_count FROM sg_ledger WHERE pid = %d AND (type LIKE '%s' OR metadata LIKE 'gamecode:%s') AND game_term = '%s'",
                                                $user->player['pid'], $text_pattern, $text_pattern, $badge->game_term));
        $player_count = $lid_count->lid_count;
        $formula_type = $text_pattern . " scores in your ledger";
      }
      else {
        // Collection Badge
        $formula_type = ' criteria';
        $codes = explode(',', $badge->formula);
        $total_count = count($codes);
        $player_matches = array();
        $gc_rows = array();

        foreach ($codes as $code_id => $text_pattern) {
          $text_patterns = explode('|', $text_pattern);
          if (count($text_patterns) > 1) {
            $gc_rows[] = array('Game Code' => '<strong>One of the following:</strong>',
                               'Description' => '',
                               'Earned On' => '');
            $any_mode = TRUE;
          }
          else {
            $any_mode = FALSE;
          }

          foreach ($text_patterns as $pattern) {
            $gc_row = array('Game Code' => '',
                            'Description' => '',
                            'Earned On' => '');

            // is it a game code?
            $gc = db_fetch_object(db_query("SELECT * FROM sg_game_codes WHERE text = '%s'", $pattern));
            if ($gc->code_id) {
              $formula_type = ' game codes found';
              $gc_row['Game Code'] = '???????';
              if ($hint = $gc->hint) {
                $hint = str_replace('\'', '\x27', str_replace('"', '\x22', $hint));
                $gc_row['Description'] = "<a onclick=\"this.innerHTML = 'HINT: $hint';\">(click for hint)</a>";
              }
            }
            else {
              // not a game code
              $gc_row['Game Code'] = $pattern;
            }

            $ledger = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d AND (type LIKE '%s' OR metadata LIKE 'gamecode:%s') AND game_term = '%s' LIMIT 1",
                                               $user->player['pid'], $pattern, $pattern, $badge->game_term));
            if ($ledger->lid) {
              if (!$player_matches[$code_id]) {
                $player_count++;
                $player_matches[$code_id] = TRUE;
              }
              if ($gc->code_id) {
                $gc_row['Game Code'] = $gc->text;
                $gc_row['Description'] = $gc->description;
              }
              $gc_row['Earned On'] = date('F j, Y, g:i a', $ledger->timestamp);
            }

            if ($any_mode) {
              $gc_row['Game Code'] = '-- ' . $gc_row['Game Code'];
            }

            $gc_rows[] = $gc_row;
          }
        }
      }


      if ($user->player['pid']) {
        // Show progress bar
        if ($player_count) {
          $percentage = min(round(($player_count / $total_count) * 100), 100);
        }
        else {
          $percentage = 0;
        }
        $content .= "<h2>Your Player Progress: $percentage% ($player_count / $total_count $formula_type)</h2>";
        $content .= '<div class="meter">';
        if ($percentage == 0) {
          $percentage = 1;
        }
        $content .= "<span style=\"width: $percentage%\"></span>";
        $content .= '</div>'; // div.meter
        $content .= $player_badge_status;
      }

      if (count($gc_rows)) {
        $content .= theme('table', array_keys($gc_rows[0]), $gc_rows);
      }

      if ($badge_list) {
        $content .= '<div class="badge-collection-list">';
        $content .= '<h2>Required Badges:</h2>';
        $content .= '<div id="summergame-badges-page">';
        $content .= $badge_list;
        $content .= '</div>';
        $content .= '</div>';
      }
    }
    $content .= '</div>';
  }
  else {
    $content .= '<p>Sorry, no badge found with that ID.</p>';
  }

  return $content;
}

function theme_summergame_badge() {
  global $user;
  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
  $sg_image_path = base_path() . file_directory_path() . '/sg_images/';
  $content = '';

  foreach (func_get_args() as $bid) {
    $badge = db_fetch_array(db_query("SELECT * FROM sg_badges WHERE bid = %d", $bid));
    $img_class = "summergame-badge";

    $hide_badge = FALSE;
    if ($badge['reveal']) {
      if (count($user->player['bids'])) {
        $required_bids = explode(',', $badge['reveal']);
        foreach ($required_bids as $required_bid) {
          if (!$user->player['bids'][$required_bid]) {
            $hide_badge = TRUE;
            break;
          }
        }
      }
      else {
        // no player or player has no badges
        $hide_badge = TRUE;
      }
    }

    if ($hide_badge) {
      $img_title = '???????';
      $img_src = $sg_image_path . 'hidden_100.png';
    }
    else {
      $img_title = $badge['title'] . " (Difficulty: " . $badge['difficulty'] . ")";
      $img_src = $sg_image_path . $badge['image'] . '_100.png';
    }

    if ($user->player['pid']) {
      if ($user->player['bids'][$bid]) {
        $img_title .= "\n" . 'Received on ' . date('F j, Y g:i A', $user->player['bids'][$bid]);
      }
      else {
        $img_class .= ' not-earned';
      }
    }

    $img_title = htmlentities($img_title);
    $content .= l("<img class=\"$img_class\" title=\"$img_title\" src=\"$img_src\">",
                  'summergame/badge/' . $bid,
                  array('html' => TRUE,
                        'query' => array('lightbox' => 1),
                        'attributes' => array('rel' => 'lightframe'),
                    )
                  );
  }
  return $content;
}

/**
 * HOOK: Receive and respond to text messages
 */
function summergame_twilio_respond($incoming) {
  // Prep generic response array
  $response_template = array('uid' => twilio_lookup_user($incoming['phone']),
                             'phone' => $incoming['phone'],
                             'incoming' => 0);
  $responses = array();

  // Try to load existing player
  $player = summergame_player_load(array('phone' => $incoming['phone']));

  // Determine if text is a SummerGame text
  if (preg_match('/^[A-Za-z]([\d]{6})$/', $incoming['text'], $matches)) {
    // Cell phone merge
    if ($web_player = summergame_player_load(array('phone' => $matches[1]))) {
      // set the phone number on the web player and merge the two
      $web_player['phone'] = $incoming['phone'];
      summergame_player_save($web_player);

      $response = $response_template;
      $response['text'] .= 'Updated your player record with the phone # ' . $incoming['phone'];
      $responses[] = $response;

      if ($player['pid'] && !$player['uid']) {
        summergame_players_merge($web_player['pid'], $player['pid']);
        $response = $response_template;
        $response['text'] .= 'Merged this phone\'s player record with your website player';
        $responses[] = $response;
      }
    }
  }
  else if (strtolower($incoming['text']) == 'newplayer' ||
           strtolower($incoming['text']) == 'new player') {
    if (!$player['pid']) {
      $new_player_needed = TRUE;
    }
    else {
      $response = $response_template;
      $response['text'] .= 'Player #' . $player['pid'] . ' already attached to this phone. Enter game codes to play!';
      $responses[] = $response;
    }
  }
  else if (preg_match('/^S?[ART]G[\d]{5}$/', $incoming['text'])) {
    $game_card_text = TRUE;
    if (!$player['pid']) {
      $new_player_needed = TRUE;
    }
  }
  else if (stripos($incoming['text'], 'nick ') === 0 || stripos($incoming['text'], 'nickname ') === 0) {
    $nickname_update = TRUE;
    if (!$player['pid']) {
      $new_player_needed = TRUE;
    }
  }
  else {
    // check if it's a game code
    $text = strtoupper(preg_replace('/[^A-Za-z0-9]/', '', $incoming['text']));
    $gc = db_fetch_object(db_query("SELECT * FROM sg_game_codes WHERE text = '%s'", $text));
    if ($gc->code_id) {
      $game_code_text = TRUE;
      if (!$player['pid']) {
        $new_player_needed = TRUE;
      }
    }
  }

  // New Player handling
  if ($new_player_needed) {
    $new_player = array('phone' => $incoming['phone']);
    $player = summergame_player_save($new_player);
    $response = $response_template;
    $response['text'] = "New Summer Game player #" . $player['pid'] . " created for this phone.";
    $responses[] = $response;
    // Signup bonus
    $points = summergame_player_points($player['pid'], 100, 'Signup',
                                       'Signed Up for the Summer Game', 'via:txt');
    $response = $response_template;
    $response['text'] = "Earned $points Summer Game points for signing up!";
    $responses[] = $response;
  }

  if ($game_card_text || $game_code_text) {
    // Process results for ALL Player records with this number
    $res = db_query('SELECT pid FROM sg_players WHERE phone = %d', $incoming['phone']);
    while ($player_info = db_fetch_object($res)) {
      $player = summergame_player_load(array('pid' => $player_info->pid));
      // Associate a gamecard with the player if a game card ID
      if ($game_card_text) {
        $player['gamecard'] = $incoming['text'];
        summergame_player_save($player);
        $response = $response_template;
        $response['text'] .= 'Updated your player record with the scorecard ID ' . $incoming['text'];
        $responses[] = $response;
      }
      else {
        // Try to redeem text as a game code
        $status = summergame_redeem_code($player['pid'], $incoming['text']);

        if ($status['success'] || $status['error']) {
          $response = $response_template;
          $response['text'] .= $status['success'] . $status['error'];
          $responses[] = $response;
        }
        if (variable_get('summergame_dod_enabled', FALSE)) {
          if ($status['success']) {
            // Check how many DoD game codes they have received
            $res = db_query("SELECT COUNT(*) AS dod_count FROM sg_ledger WHERE pid = %d " .
                            "AND game_term = 'DoOrDiag' AND " .
                            "((metadata LIKE '%%gamecode:%%' AND metadata NOT LIKE '%%gamecode:READY%%') " .
                            "OR (type = 'New Track' AND points > 0))",
                            $player['pid']);
            $row = db_fetch_object($res);
            if ($row->dod_count == 4) {
              $response = $response_template;
              $response['text'] .= "You have completed the short game! Go receive a prize or continue playing!";
              $responses[] = $response;
            }
            else if ($row->dod_count == 10) {
              $response = $response_template;
              $response['text'] .= "You have completed the long game! Go get your prize!";
              $responses[] = $response;
            }
          }
        }
        // If not recognized, no response to allow other handlers to respond
      }
    }
  }
  // New Nickname
  else if ($nickname_update) {
    $player['nickname'] = substr($incoming['text'], strpos($incoming['text'], ' ') + 1);
    $player = summergame_player_save($player);
    $response = $response_template;
    $response['text'] .= 'Your Player nickname has been set to ' . $player['nickname'];
    $responses[] = $response;
  }
  // Lego Contest
  else if (variable_get('summergame_lego_enabled', FALSE)) {
    $text = strtoupper($incoming['text']);
    if (preg_match('/^L[PKEMHA][\d]{3}$/', $text)) {
      require_once(variable_get('summergame_libphp_path', '') . 'contrib/redisent/redisent.php');
      $redis = new Redisent('multivac');
      // Set category vote for this phone
      $redis->set('lego_vote:' . $text[1] . ':' . $incoming['phone'], $text);
      $response = $response_template;
      $response['text'] .= 'Your vote has been recorded for Group ' . $text[1];
      $responses[] = $response;
    }
  }
  // Do Or Diag
  else if (variable_get('summergame_dod_enabled', FALSE)) {
    $text = strtoupper($incoming['text']);
    if ($dod_response = summergame_dod_response($text, $player['pid'])) {
      $response = $response_template;
      $response['text'] .= $dod_response;
      $responses[] = $response;

      // Check how many DoD game codes they have received
      $res = db_query("SELECT COUNT(*) AS dod_count FROM sg_ledger WHERE pid = %d " .
                      "AND game_term = 'DoOrDiag' AND " .
                      "((metadata LIKE '%%gamecode:%%' AND metadata NOT LIKE '%%gamecode:READY%%') " .
                      "OR (type = 'New Track' AND points > 0))",
                      $player['pid']);
      $row = db_fetch_object($res);
      if ($row->dod_count == 4) {
        // Check if they have finished the short game
        $ledger = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d " .
                                           "AND game_term = 'DoOrDiag' AND " .
                                           "Type LIKE 'Completed Short Game'", $player['pid']));
        if (!$ledger->lid) {
          summergame_player_points($player['pid'], 0, 'Completed Short Game',
                                   'You answered four Do Or Diag questions', '', 'DoOrDiag');
          $response = $response_template;
          $response['text'] .= "You have completed the short game! Go receive a prize or continue playing!";
          $responses[] = $response;
        }
      }
      else if ($row->dod_count == 10) {
        // Check if they have finished the long game
        $ledger = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d " .
                                           "AND game_term = 'DoOrDiag' AND " .
                                           "Type LIKE 'Completed Long Game'", $player['pid']));
        if (!$ledger->lid) {
          summergame_player_points($player['pid'], 0, 'Completed Long Game',
                                   'You answered ten Do Or Diag questions', '', 'DoOrDiag');
          $response = $response_template;
          $response['text'] .= "You have completed the long game! Go get your prize!";
          $responses[] = $response;
        }
      }
    }
  }

  // Check if Trivia is active
  if (variable_get('summergame_trivia_active', FALSE) && !count($responses) && $player['pid']) {
    $guess = $incoming['text'];
    $answer = variable_get('summergame_trivia_answer', '');

    db_query("INSERT INTO sg_trivia_guesses (guess) VALUES ('%s')", $guess);
    if (stripos($guess, $answer) !== FALSE) {
      // Correct Answer
      if (db_query("INSERT INTO sg_trivia_correct (phone) VALUES ('%d')", $incoming['phone'])) {
        $place = db_last_insert_id('sg_trivia', 'id');
        $points = 51 - $place;

        summergame_player_points($player['pid'], $points, 'Correct Trivia Answer',
                                 "Correct Answer #$place: $guess", '', 'TownieTrivia');

        $response = $response_template;
        $response['text'] = "Your answer of \"$guess\" is Correct Answer #$place! You earn $points points.";
      }
      else {
        // Duplicate correct answer
        $response = $response_template;
        $response['text'] = "Duplicate answer \"$guess\" received.";
      }
/*
      if ($place == 1) {
        $response['text'] .= ' Please see a staff member to claim your prize';
      }
*/
      $responses[] = $response;
    }
    else {
      $response = $response_template;
      $response['text'] = "Sorry, your answer of \"$guess\" was incorrect. Please try again";
      $responses[] = $response;
    }
  }

  if (count($responses)) {
    return $responses;
  }
}

function summergame_dod_response($text, $pid) {
  $response = '';

  // Grab DoD Data from Couch
  $libphp_path = variable_get('summergame_libphp_path', '');
  include_once($libphp_path . 'contrib/PHP-on-Couch/lib/couch.php');
  include_once($libphp_path . 'contrib/PHP-on-Couch/lib/couchClient.php');
  include_once($libphp_path . 'contrib/PHP-on-Couch/lib/couchDocument.php');
  $couch = new couchClient('COUCHDB_DSN_STRING', 'doordiag');

  $track_lookup = array();
  try {
    $tracks = $couch->getDoc('tracks');
    foreach ($tracks as $code => $track) {
      if ($code[0] != '_') {
        $track_lookup[$code] = $track;
      }
    }
  }
  catch (Exception $e) {
    echo "Something weird happened: ".$e->getMessage()." (errcode=".$e->getCode().")\n";
  }

  if ($new_track = $track_lookup[$text]) {
    // check if they've already received points for this track
    $row = db_fetch_array(db_query("SELECT * FROM sg_ledger WHERE pid = %d " .
                                   "AND metadata LIKE '%%track:%s%%' AND points > 0",
                                   $pid, $new_track));
    $points = ($row['lid'] ? 0 : 500);

    summergame_player_points($pid, $points, 'New Track', "Started the $new_track Track",
                             'track:' . $new_track, 'DoOrDiag');
    $response = "You just received $points Do Or Diag points, and you are now on the $new_track trivia track.";
  }
  else try {
    $questions = $couch->getDoc($text);

    // Determine player track
    $res = db_query("SELECT * FROM sg_ledger WHERE pid = %d AND game_term = 'DoOrDiag' " .
                    "AND metadata LIKE '%track:%' ORDER BY timestamp DESC LIMIT 1", $pid);
    $row = db_fetch_array($res);
    preg_match('/track:([\w]+)/', $row['metadata'], $matches);
    $track = $matches[1];

    $response = $questions->$track;
  }
  catch (Exception $e) {
    // no couch doc ID matches that text
  }

  return $response;
}

/**
 * HOOK: Add points when someone comments
 */
function summergame_comment($action, $op) {
  if (variable_get('summergame_points_enabled', 0)) {
    if ($op == 'publish' || $op == 'delete') {
      // Cast $action to array if it is an object
      if (is_object($action)) {
        $action = get_object_vars($action);
      }
      $players = summergame_player_load_all($action['uid']);
      if (count($players)) {
        // Check if they have already received points for this comment
        $pids = array();
        foreach ($players as $player) {
          $pids[] = $player['pid'];
        }
        $ledger = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid IN (%s) and metadata LIKE '%%cid:%d%%'",
                                           implode(',', $pids), $action['cid']));
        if ($op == 'publish' && !$ledger->lid) {
          $metadata = array(
            'nid' => $action['nid'],
            'cid' => $action['cid'],
          );
          $account = user_load($action['uid']);
          $player = summergame_player_load($account->sg_active_pid ? $account->sg_active_pid : min($pids));
          if ($points = summergame_player_points($player['pid'], 50, 'Added Comment',
                                                 'Commented on a website post', $metadata)) {
            $player_name = $player['nickname'] ? $player['nickname'] : $player['name'];
            $others_message = summergame_other_players_message();
            $scorecard_link = l($points . ' Summer Game points', 'summergame/player/' . $player['pid']);
            drupal_set_message("Player $player_name earned $scorecard_link for commenting on a website post.$others_message");
          }
        }
        else if ($op == 'delete' && $ledger->lid) {
          db_query("DELETE FROM sg_ledger WHERE lid = %d", $ledger->lid);
          drupal_set_message("Removed Summer Game points for deleted comment");
        }
      }
    }
  }
}

/**
 * HOOK: Add points when someone views a node
 *
function summergame_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if (variable_get('summergame_points_enabled', 0)) {
    global $user;
    if ($user->uid && $op == 'view' && $page) {
      // check if user has already received points for viewing this node
      if ($player = summergame_player_load(array('uid' => $user->uid))) {
        $res = db_query("SELECT lid FROM sg_ledger WHERE pid = %d AND metadata = 'Read a Post' " .
                        "AND description LIKE '%%nid:%d' LIMIT 1",
                        $player['pid'], $node->nid);
        $rate_count = db_fetch_object($res);
        if (!$rate_count->lid) {
          $node_link = l($node->title, 'node/' . $node->nid);
          $points = summergame_player_points($player['pid'], 10, 'Read a Post',
                                             'Read a website post: ' . $node_link, 'nid:' . $node->nid);
          $points_link = l($points . ' Summer Game points', 'summergame/player');
          drupal_set_message("Earned $points_link for reading a website post");
        }
      }
    }
  }
}
 */

/**
 * UTILITY: Determine access to a player record
 */
function summergame_player_access($pid) {
  $access = FALSE;

  if (user_access('administer summergame')) {
    $access = TRUE;
  }
  else {
    global $user;
    if ($user->uid) {
      $player = summergame_player_load($pid);
      if ($user->uid == $player['uid']) {
        $access = TRUE;
      }
    }
  }
  return $access;
}

/**
 * UTILITY: Lookup a player record (based on the user_load function)
 */
function summergame_player_load($player_info = array()) {
  // Dynamically compose a SQL query:
  $query = array();
  $params = array();

  // Default to pid lookup
  if (is_numeric($player_info)) {
    $player_info = array('pid' => $player_info);
  }
  else if (!is_array($player_info)) {
    return FALSE;
  }

  foreach ($player_info as $key => $value) {
    if ($value) {
      if ($key == 'pid' || $key == 'phone' || $key == 'uid') {
        $query[] = "$key = %d";
        $params[] = $value;
      }
      else {
        $query[] = "LOWER($key) = LOWER('%s')";
        $params[] = $value;
      }
    }
  }

  if (count($params)) {
    $result = db_query('SELECT * FROM {sg_players} WHERE ' . implode(' AND ', $query) .
                       ' ORDER BY pid ASC LIMIT 1', $params);
    $player = db_fetch_array($result);
  }

  if ($player['pid']) {
    // Load badge ids
    $result2 = db_query("SELECT * FROM {sg_players_badges} WHERE pid = %d", $player['pid']);
    while ($badge = db_fetch_object($result2)) {
      $player['bids'][$badge->bid] = $badge->timestamp;
    }
    return $player;
  }
  else {
    return FALSE;
  }
}

/**
 * UTILITY: Load ALL players associated with a user
 */
function summergame_player_load_all($uid) {
  $result = db_query("SELECT * FROM sg_players WHERE uid = %d ORDER BY pid ASC", $uid);
  $players = array();
  while ($player = db_fetch_array($result)) {
    $players[] = $player;
  }

  return $players;
}

/**
 * PAGE CALLBACK: Set active player for a user
 */
function summergame_player_set_active($pid) {
  if ($player = summergame_player_load($pid)) {
    if ($player['uid']) {
      if ($account = user_load($player['uid'])) {
        user_save($account, array('sg_active_pid' => $pid));
        drupal_set_message('Player #' . $pid . ' (' . $player['nickname'] . ') is now the active player for the website account <em>' .
                           $account->name . '</em>. Online activities that earn points (comments, ratings, reviews, etc.) will now be awarded ' .
                           'to this player.');
      }
      else {
        drupal_set_message('Cannot load the website account associated with Player #' . $pid, 'warning');
      }
    }
    else {
      drupal_set_message('No website user associated with Player #' . $pid, 'warning');
    }
  }
  else {
    drupal_set_message('No player found with Player #' . $pid);
  }
  drupal_goto('summergame/player/' . $pid);
}

/**
 * UTILITY: Load player points
 */
function summergame_get_player_points($pid, $game_term = '', $type = '') {
  $player_points = array(
    'career' => 0,
  );

  $query = 'SELECT * FROM sg_ledger WHERE pid = %d';
  $args = array($pid);
  if ($game_term) {
    $query .= " AND game_term = '%s'";
    $args[] = $game_term;
  }
  if ($type) {
    $query .= " AND type = '%s'";
    $args[] = $type;
  }
  $query .= ' ORDER BY timestamp DESC';

  $res = db_query($query, $args);

  while ($row = db_fetch_array($res)) {
    $game_term = $row['game_term'];
    $type = $row['type'];
    $player_points[$game_term]['ledger'][] = $row;
    $player_points[$game_term]['balance'] += $row['points'];
    $player_points[$game_term]['types'][$type] += $row['points'];
    if ($row['points'] > 0 && strpos($row['metadata'], 'leaderboard:no') === FALSE) {
      // Don't count non-leaderboard points in the total
      $player_points[$game_term]['total'] += $row['points'];
      $player_points['career'] += $row['points'];
    }
  }

  // Sort type points
  foreach ($player_points as $game_term => &$details) {
    if (is_array($details['types'])) {
      arsort($details['types']);
    }
  }

  // Get badges
  $res = db_query("SELECT * FROM sg_players_badges, sg_badges " .
                  "WHERE sg_players_badges.pid = %d AND sg_players_badges.bid = sg_badges.bid " .
                  "ORDER BY sg_players_badges.timestamp ASC", $pid);
  while ($badge = db_fetch_array($res)) {
    $game_term = $badge['game_term'];
    $player_points[$game_term]['badges'][] = $badge;
  }

  return $player_points;
}

/**
 * UTILITY: Save a player record
 */
function summergame_player_save($player) {
  $query = array();
  $params = array();

  if ($pid = $player['pid']) {
    // Update existing player record
    unset($player['pid']);
    foreach ($player as $key => $value) {
      if (db_column_exists('sg_players', $key)) {
        if (strtoupper($value) == 'NULL') {
          $query[] = $key . ' = NULL';
        }
        else {
          $query[] = $key . ' = ' . (is_numeric($value) ? '%d' : "'%s'");
          $params[] = $value;
        }
      }
    }
    $params[] = $pid;
    db_query('UPDATE sg_players SET ' . implode($query, ', ') . ' WHERE pid = %d', $params);
  }
  else {
    // New player record
    foreach ($player as $key => $value) {
      if (db_column_exists('sg_players', $key)) {
        $query[] = $key . ' = ' . (is_numeric($value) ? '%d' : "'%s'");
        $params[] = $value;
      }
    }
    db_query('INSERT INTO sg_players SET ' . implode($query, ', '), $params);
    $pid = db_last_insert_id('sg_players', 'pid');
  }

  return summergame_player_load(array('pid' => $pid));
}

/**
 * UTILITY: Delete a player record
 *
 * Uses the same arguments as summergame_player_load
 */
function summergame_player_delete($player_info) {
  if ($player = summergame_player_load($player_info)) {
    // Delete points
    db_query("DELETE FROM sg_ledger WHERE pid = %d", $player['pid']);
    // Delete badges
    db_query("DELETE FROM sg_players_badges WHERE pid = %d", $player['pid']);
    // Delete team memberships
    db_query("DELETE FROM sg_players_teams WHERE pid = %d", $player['pid']);
    // Delete player info
    db_query("DELETE FROM sg_players WHERE pid = %d", $player['pid']);
  }
}

/**
 * UTILITY: Redeem a game code for a player
 */
function summergame_redeem_code($pid, $code_text) {
  // Remove non-alphanumerics from Game Code text
  $code_text = preg_replace('/[^A-Za-z0-9]/', '', $code_text);

  $code = db_fetch_object(db_query("SELECT * FROM sg_game_codes WHERE text = '%s'", strtoupper($code_text)));

  if ($code->code_id) {
    // Existing code
    $now = time();
    if ($now < $code->valid_start) {
      $start_date = date('F j, Y, g:i a', $code->valid_start);
      return array('error' => "Code \"$code->text\" is not yet valid. It will activate on $start_date");
    }
    else if ($now > $code->valid_end) {
      $end_date = date('F j, Y, g:i a', $code->valid_end);
      return array('error' => "Code \"$code->text\" is no longer valid. It expired on $end_date");
    }
    else if ($code->max_redemptions && ($code->num_redemptions >= $code->max_redemptions)) {
      return array('error' => "Code \"$code->text\" has reached maximum number of redemptions");
    }
    else {
      // check if player has already redeemed this code
      $res = db_query("SELECT * FROM sg_ledger WHERE pid = %d AND metadata LIKE 'gamecode:%s'", $pid, $code->text);
      if ($existing = db_fetch_object($res)) {
        $existing_date = date('F j, Y, g:i a', $existing->timestamp);
        return array('error' => "Code \"$code->text\" already redeemed on $existing_date");
      }
    }
    // Go ahead and redeem
    db_query("UPDATE sg_game_codes SET num_redemptions = num_redemptions + 1 WHERE code_id = %d", $code->code_id);

    if ($code->points_override) {
      $code->points = $code->points_override;
    }
    else if ($code->diminishing) {
      // Adjust points if diminishing
      $code->points -= $code->num_redemptions;
    }
    if ($code->game_term_override) {
      $code->game_term = $code->game_term_override;
    }

    $points = summergame_player_points($pid, $code->points, 'Game Code', $code->description, 'gamecode:' . $code->text, $code->game_term);
    $message = "Redeemed code \"$code->text\" for $points $code->game_term points";
    if ($code->description) {
      $message .= ': ' . $code->description;
    }
    return array('success' => $message);
  }
  else {
    return array('warning' => "Code is not recognized");
  }
}

/**
 * UTILITY: Apply points to a player
 */
function summergame_player_points($pid, $points, $type, $description = '', $metadata = '', $game_term = '') {
  if (is_array($metadata)) {
    if ($limit = $metadata['daily_limit']) {
      $day_start = mktime(0, 0, 0);

      $sql = "SELECT SUM(points) AS total FROM sg_ledger " .
             "WHERE pid = %d " .
             "AND timestamp > %d " .
             "AND metadata LIKE '%%daily_limit:%d%%'";
      $row = db_fetch_object(db_query($sql, $pid, $day_start, $limit));

      $total = $row->total + $points;
      if ($total > $limit) {
        // If over the limit, cap the point total at the daily limit
        $overage = $total - $limit;
        drupal_set_message("Sorry, your score of $points brings you over the daily limit of $limit by $overage. You may report those additional points tomorrow.", 'warning');
        $points -= $overage;
      }
      else {
        drupal_set_message("You have earned $total points of your daily limit of $limit for this type of scoring");
      }
    }

    // Convert metadata to string
    $md_string = '';
    if (count($metadata)) {
      foreach ($metadata as $key => $value) {
        if (!is_numeric($key)) {
          $md_string .= $key . ':' . $value . ' ';
        }
        else {
          $md_string .= $value . ' ';
        }
      }
    }
    $metadata = trim($md_string);
  }

  // Set game_term
  if (empty($game_term)) {
    $game_term = variable_get('summergame_current_game_term', '');
  }

  db_query("INSERT INTO sg_ledger (pid, points, type, metadata, description, game_term, timestamp) " .
           "VALUES (%d, %d, '%s', '%s', '%s', '%s', %d)",
           $pid, $points, $type, $metadata, $description, $game_term, time());

  // Check if the new points affect any badges
  if ($messages = summergame_player_check_badges($pid, $game_term)) {
    foreach ($messages as $message) {
      drupal_set_message($message);
    }
  }

  return $points;
}

function summergame_other_players_message() {
  // Check for other players if awarding points to logged in user
  global $user;
  $message = '';
  if ($user->other_players) {
    $other_links = array();
    foreach ($user->other_players as $other_player) {
      $other_links[] = l(($other_player['nickname'] ? $other_player['nickname'] : $other_player['name']),
                         'summergame/player/' . $other_player['pid'] . '/setactive');
    }
    $message .= ' (Make another player active?: ' .
                implode(' OR ', $other_links) . ')';
  }

  return $message;
}

/**
 * UTILITY: Check player for new badges
 */
function summergame_player_check_badges($pid, $game_term) {
  $messages = array();

  $player_bids = array();
  $res = db_query("SELECT * FROM sg_players_badges WHERE pid = %d", $pid);
  while ($player_badge = db_fetch_object($res)) {
    $player_bids[] = $player_badge->bid;
  }

  $res = db_query("SELECT * FROM sg_badges WHERE game_term = '%s' " .
                  "AND active = 1 AND formula != '' ORDER BY bid ASC", $game_term);
  while ($badge = db_fetch_object($res)) {
    if (!in_array($badge->bid, $player_bids)) {
      $awarded = FALSE;
      if (preg_match('/^{([\d,]+)}$/', $badge->formula, $matches)) {
        // Badge collection badge
        $eligible = TRUE;
        foreach (explode(',', $matches[1]) as $formula_bid) {
          if (!in_array($formula_bid, $player_bids)) {
            $eligible = FALSE;
            break;
          }
        }
        if ($eligible) {
          $awarded = summergame_player_award_badge($pid, $badge->bid);
        }
      }
      else if (strpos($badge->formula, '::')) {
        // Multiple of a ledger type formula
        list($count_limit, $text_pattern) = explode('::', $badge->formula);
        $lid_count = db_fetch_object(db_query("SELECT COUNT(lid) AS lid_count FROM sg_ledger WHERE pid = %d AND (type LIKE '%s' OR metadata LIKE 'gamecode:%s') AND game_term = '%s'",
                                              $pid, $text_pattern, $text_pattern, $badge->game_term));
        if ($lid_count->lid_count >= $count_limit) {
          $awarded = summergame_player_award_badge($pid, $badge->bid);
        }
      }
      else {
        // Collection Badge
        $eligible = TRUE;
        foreach (explode(',', $badge->formula) as $text_pattern) {
          $query = "SELECT lid FROM sg_ledger WHERE pid = %d AND (";
          $args = array($pid);

          $text_patterns = explode('|', $text_pattern);
          foreach ($text_patterns as &$pattern) {
            $args[] = $pattern;
            $args[] = $pattern;
            $pattern = "(type LIKE '%s' OR metadata LIKE 'gamecode:%s')";
          }
          $query .= implode(' OR ', $text_patterns);

          $query .= ") AND game_term = '%s' LIMIT 1";
          $args[] = $badge->game_term;

          $ledger = db_fetch_object(db_query($query, $args));

          if (!$ledger->lid) {
            $eligible = FALSE;
            break;
          }
        }
        if ($eligible) {
          $awarded = summergame_player_award_badge($pid, $badge->bid);
        }
      }

      if ($awarded) {
        $badge_detail_link = l('Badge Detail Page', 'summergame/badge/' . $badge->bid,
                               array('html' => TRUE,
                                     'query' => array('lightbox' => 1),
                                     'attributes' => array('rel' => 'lightframe'),
                                    )
                              );
        $messages[] = "Earned the $badge->title Badge! Share your accomplishment on Twitter or Facebook on the $badge_detail_link";
        $player_bids[] = $badge->bid;
        // check if a bonus should be applied
        if ($badge->points) {
          // check for points override
          if ($badge->points_override) {
            $badge->points = $badge->points_override;
          }
          if ($badge->game_term_override) {
            $badge->game_term = $badge->game_term_override;
          }
          else if (empty($badge->game_term)) {
            $badge->game_term = variable_get('summergame_current_game_term', '');
          }

          // Handle multiple bonuses
          $points_values = explode(',', $badge->points);
          $game_terms = explode(',', $badge->game_term);
          $points = 0;

          foreach ($game_terms as $i => $game_term) {
            if ($points_values[$i]) {
              $points = $points_values[$i];
            }
            db_query("INSERT INTO sg_ledger (pid, points, type, metadata, description, game_term, timestamp) " .
                     "VALUES (%d, %d, '%s', '%s', '%s', '%s', %d)",
                     $pid, $points, 'Badge Bonus', $metadata, "Earned the $badge->title Badge",
                     $game_term, time());
            $messages[] = "Received $points bonus $game_term points for earning the $badge->title Badge";
          }
        }
        // check if an email should be sent to awardee
        if ($badge->email_message) {
          // Find email address attached to user account
          $u = db_fetch_object(db_query("SELECT users.mail AS mail FROM users, sg_players WHERE users.uid = sg_players.uid AND sg_players.pid = %d", $pid));
          if ($u->mail) {
            $subject = "Congratulations! You've earned the $badge->title Badge";
            $from = variable_get('site_mail', ini_get('sendmail_from'));
            if ($badge->email_attachment) {
              summergame_email_attachment($u->mail, $subject, $badge->email_message, $from, $badge->email_attachment);
            }
            else {
              mail($u->mail, $subject, $badge->email_message, "From: $from");
            }
            $messages[] = "NOTE: A special message has been sent to $u->mail with further information";
          }
          else {
            $messages[] = "NOTE: This Badge includes a special email message, but we could not find an email address for you";
          }
        }
      }
    }
  }

  return $messages;
}

/**
 * UTILITY: Award a badge to a player
 */
function summergame_player_award_badge($pid, $bid) {
  db_query("INSERT IGNORE INTO sg_players_badges (pid, bid, timestamp) " .
           "VALUES (%d, %d, %d)",
           $pid, $bid, time());
  return db_affected_rows();
}

/**
 * UTILITY: Update Badges for All Players within a given game term. Use when
 * creating new badges that should be awarded to existing player scores, such as
 * Master badges at the end of the game season.
 */
function summergame_check_all_player_badges($game_term = '') {
  $p_count = 0;
  $res = db_query("SELECT pid FROM sg_ledger WHERE game_term = '%s' GROUP BY pid", $game_term);
  while ($p = db_fetch_object($res)) {
    summergame_player_check_badges($p->pid, $game_term);
    if (++$p_count % 100 == 0) {
      echo date("Y-m-d H:i:s") . "Processed $p_count Players..." . PHP_EOL;
    }
  }
}

/**
 * PAGE: Generate and return a PDF version of the game card PDF
 */
function summergame_pdf($type = 'adult', $code_id = 0) {
  $libphp_path = variable_get('summergame_libphp_path', '');
  require_once($libphp_path . 'contrib/fpdf/fpdf.php');
  require_once($libphp_path . 'contrib/fpdi/fpdi.php');
  require_once($libphp_path . 'contrib/redisent/redisent.php');
  $file_path = drupal_get_path('module', 'summergame') . '/pdf/';
  $redis = new Redisent('multivac');

  if ($type == 'gamecode') {
    $gamecode = db_fetch_object(db_query("SELECT * FROM sg_game_codes WHERE code_id = %d", $code_id));

    $event_code = strtoupper($gamecode->text); // Code for the event, Need to be in all CAPS
    $event_points = $gamecode->points . ' Points'; // Points for the event
    $event_title = $gamecode->description; // Title of event

    $code_link = url('summergame/player/gamecode',
                     array('absolute' => TRUE,
                           'query' => array('text' => $event_code),
                           )
                    );
    $qrcode = 'http://api.qrserver.com/v1/create-qr-code/?data=' .
              urlencode($code_link);

    // initiate FPDI
    $pdf =& new FPDI('L', 'mm', 'Letter');
    $pdf->SetAutoPageBreak(FALSE);
    $pdf->AddPage();

    // set the sourcefile
    $pdf->setSourceFile($file_path . 'code_template.pdf');
    $tplidx = $pdf->importPage(1);
    $pdf->useTemplate($tplidx);
    $page_width = $pdf->w - $pdf->lMargin - $pdf->rMargin;

    // now write some text
    $pdf->AddFont('Carton_Six', '', 'Carton_Six.php');
    $font_size = 110;
    $pdf->SetFont('Carton_Six', '', $font_size);
    while ($pdf->GetStringWidth($event_code) > $page_width) {
      $font_size -= 10;
      $pdf->SetFont('Carton_Six', '', $font_size);
    }
    $pdf->SetXY($pdf->lMargin, 45);
    $pdf->Cell(0, 10, $event_code, 0, 1, 'C');

    $pdf->SetFont('Carton_Six', '', 110);
    $pdf->SetXY($pdf->lMargin, 130);
    $pdf->Cell(0, 10, $event_points, 0, 1, 'C');

    $pdf->SetFont('Helvetica', 'B', 12);
    $pdf->SetXY($pdf->lMargin, 200);
    $pdf->Cell(0, 10, $event_title, 0, 1);

    // add the QR Code
    $pdf->SetXY(-30, -30);
    $pdf->Image($qrcode, NULL, NULL, 20, 20, 'PNG');

    $pdf->Output($event_code . '_code.pdf', 'D');
  }
  else if ($type == 'youth') {
    $redis->incr('ygpdfcounter');
    drupal_goto($file_path . 'SG_Youth_2015.pdf');
  }
  else { // default to the adult single player form
    $redis->incr('agpdfcounter');
    drupal_goto($file_path . 'SG_Adult_Teen_2015.pdf');
  }
}

/**
 * Page: Merge Two Player Records
 */
function summergame_admin_players_merge($pid1, $pid2, $confirm = '') {
  if ($confirm) {
    summergame_players_merge($pid1, $pid2);
    drupal_set_message("Player #$pid2 merged into Player #$pid1");
    drupal_goto("summergame/player/$pid1");
  }

  $p1 = summergame_player_load(array('pid' => $pid1));
  $p2 = summergame_player_load(array('pid' => $pid2));

  if ($p1['pid'] && $p2['pid']) {
    $p1_points = summergame_get_player_points($pid1);
    $p1['balance'] = $p1_points['balance'];
    $p1['total'] = $p1_points['total'];

    $p2_points = summergame_get_player_points($pid2);
    $p2['balance'] = $p2_points['balance'];
    $p2['total'] = $p2_points['total'];

    $merge_table = array();
    foreach ($p2 as $field => $p2_data) {
      $arrows = (!empty($p2_data) && empty($p1[$field]) ? '<strong>>>></strong>' : '');
      $merge_table[] = array("<strong>$field</strong>", $p2_data, $arrows, $p1[$field]);
    }

    $content .= "<h1>Merge These Player Records?</h1>";
    $content .= '<p style="color: red">Warning: Player record #' . $p2['pid'] . ' will be deleted as a result of this merge</p>';

    $content .= theme('table', array('', 'Player 2', '>>>', 'Player 1'), $merge_table);

    $content .= '<ul>';
    $content .= '<li class="button green">' . l('MERGE', $_GET['q'] . '/1') . '</li>';
    $content .= '<li class="button red">' .l('Cancel', 'summergame/admin') . '</li>';
    $content .= '</ul>';

    return $content;
  }
  else {
    drupal_set_message('Invalid Player IDs', 'error');
    drupal_goto('summergame/admin');
  }
}

/**
 * UTILITY: Merge Two Player Records
 * Additional info from player 2 is added to player 1
 */
function summergame_players_merge($pid1, $pid2) {
  $p1 = summergame_player_load(array('pid' => $pid1));
  $p2 = summergame_player_load(array('pid' => $pid2));

  // Update Player Data Fields
  foreach ($p2 as $field => $data) {
    if (empty($p1[$field])) {
      $p1[$field] = $data;
    }
  }
  summergame_player_save($p1);

  // Check for duplicate Game Codes and remove from old player
  $duplicate_codes = array();
  $res = db_query("SELECT * FROM sg_ledger WHERE pid = %d AND metadata LIKE '%%gamecode:%%'", $pid1);
  while ($row = db_fetch_array($res)) {
    if (preg_match('/gamecode:([\w]+)/', $row['metadata'], $matches)) {
      $duplicate_codes[] = $matches[1];
    }
  }
  if (count($duplicate_codes)) {
    foreach ($duplicate_codes as $duplicate) {
      db_query("DELETE FROM sg_ledger WHERE pid = %d AND metadata like '%%gamecode:%s%%'", $pid2, $duplicate);
    }
  }

  // Remove duplicate Signup and Completed bonuses
  $res = db_query("SELECT COUNT(lid) AS count FROM sg_ledger WHERE type = 'Signup' AND (pid = %d OR pid = %d)", $pid1, $pid2);
  $ledger = db_fetch_object($res);
  if ($ledger->count > 1) {
    db_query("DELETE FROM sg_ledger WHERE pid = %d AND type = 'Signup'", $pid2);
  }
  $res = db_query("SELECT COUNT(lid) AS count FROM sg_ledger WHERE type = 'Completed' AND (pid = %d OR pid = %d)", $pid1, $pid2);
  $ledger = db_fetch_object($res);
  if ($ledger->count > 1) {
    db_query("DELETE FROM sg_ledger WHERE pid = %d AND type = 'Completed'", $pid2);
  }

  // Remove duplicate badges and bonuses
  $badges = array();
  $res = db_query("SELECT * FROM sg_badges, sg_players_badges WHERE sg_badges.bid = sg_players_badges.bid AND sg_players_badges.pid = %d", $pid1);
  while ($badge = db_fetch_object($res)) {
    $badges[] = $badge;
  }
  foreach($badges as $badge) {
    db_query("DELETE FROM sg_players_badges WHERE pid = %d and bid = %d", $pid2, $badge->bid);
    $badge_description = "Earned the $badge->title Badge";
    db_query("DELETE FROM sg_ledger WHERE pid = %d AND metadata = 'Badge Bonus' AND description = '%s'", $pid2, $badge_description);
  }

  // Update remaing player2 data to point at player1 and delete player 2
  db_query("UPDATE sg_ledger SET pid = %d WHERE pid = %d", $pid1, $pid2);
  db_query("UPDATE sg_players_badges SET pid = %d WHERE pid = %d", $pid1, $pid2);
  db_query("DELETE FROM sg_players WHERE pid = %d", $pid2);
}

function summergame_intervention_form(&$form_state) {
  $form = array(
    'title' => array('#value' => '<h1>Geekly Points Intervention</h1>'),
  );

  $form['to_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Player ID'),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('Player ID of the player to receive points'),
  );
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('Number of points to award to the player'),
  );
  $form['game_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Game Term'),
    '#default_value' => variable_get('summergame_current_game_term', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Game Term where the points will be awarded'),
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#size' => 64,
    '#maxlength' => 64,
    '#description' => t('Add a description for this points award (optional)'),
  );
  $form['from_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('From Player ID'),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('Player ID of the player giving points in a transfer (optional)'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('POINTS MAKE'),
  );

  return $form;
}

function summergame_intervention_form_submit($form, &$form_state) {
  $to_pid = $form_state['values']['to_pid'];
  $points = $form_state['values']['points'];
  $game_term = $form_state['values']['game_term'];
  $description = $form_state['values']['description'];
  $from_pid = $form_state['values']['from_pid'];

  if ($player = summergame_player_load(array('pid' => $to_pid))) {
    $player_link = l('Player #' . $to_pid, 'summergame/player/' . $to_pid);
    if ($from_pid) {
      if ($from_player = summergame_player_load(array('pid' => $from_pid))) {
        // Tranfer points from from_player to player
        $from_player_link = l('Player #' . $from_pid, 'summergame/player/' . $from_pid);
        summergame_player_points($from_pid, -$points, 'Geekly Intervention',
                                 "Transfer to Player #$to_pid" . ($description ? ', ' . $description : ''),
                                 'delete:no', $game_term);
        summergame_player_points($to_pid, $points, 'Geekly Intervention',
                                 "Transfer from Player #$from_pid" . ($description ? ', ' . $description : ''),
                                 '', $game_term);
        drupal_set_message("Transferred $points $game_term points from $from_player_link to $player_link");
      }
      else {
        drupal_set_message("No player with ID #$from_pid could be found", 'error');
      }
    }
    else {
      // Award points to the player
      summergame_player_points($to_pid, $points, 'Geekly Intervention',
                               "Points awarded" . ($description ? ', ' . $description : ''),
                               '', $game_term);
      drupal_set_message("Awarded $points $game_term points to $player_link");
    }
  }
  else {
    drupal_set_message("No player with ID #$to_pid could be found", 'error');
  }

  drupal_goto('summergame/admin');
}

/**
 * UTILITY: Move a player to a different player #
 *
 * Sometimes needed to make sure the correct player is the primary player when multiple players
 * are attached to a single website account.
 */
function summergame_move_player_id($old_pid, $new_pid) {
  // Update ledger
  db_query("UPDATE sg_ledger SET pid = %d WHERE pid = %d", $new_pid, $old_pid);
  // Update player table
  db_query("UPDATE sg_players SET pid = %d WHERE pid = %d", $new_pid, $old_pid);
  // Update players badges
  db_query("UPDATE sg_players_badges SET pid = %d WHERE pid = %d", $new_pid, $old_pid);
  // Update players teams
  db_query("UPDATE sg_players_teams SET pid = %d WHERE pid = %d", $new_pid, $old_pid);
}

/**
 * UTILITY: Send an email message with an attachment
 */
function summergame_email_attachment($to, $subject, $message, $from, $fileatt, $replyto = '') {
  // handles mime type for better receiving
  $ext = strrchr($fileatt , '.');
  switch($ext) {
    case '.doc':
      $ftype = 'application/msword';
      break;
    case '.jpg':
      $ftype = 'image/jpeg';
      break;
    case '.gif':
      $ftype = 'image/gif';
      break;
    case '.zip':
      $ftype = 'application/zip';
      break;
    case '.pdf':
      $ftype = 'application/pdf';
      break;
    case '.swf':
      $ftype = 'application/x-shockwave-flash';
      break;
    case '.mp3':
      $ftype = 'audio/mpeg';
      break;
    case '.mp4':
      $ftype = 'video/mp4v-es';
      break;
    case '.mov':
      $ftype = 'video/quicktime';
      break;
    default:
      $ftype = 'application/octet-stream';
  }

  // read file into $data var
  $file = fopen($fileatt, 'rb');
  $data = fread($file, filesize($fileatt));
  fclose($file);

  // split the file into chunks for attaching
  $content = chunk_split(base64_encode($data));
  $uid = md5(uniqid(time()));

  // build the headers for attachment and html
  $EOL = PHP_EOL;
  $headers = "From: $from$EOL";
  if ($replyto) {
    $headers .= "Reply-To: $replyto$EOL";
  }
  $headers .= "MIME-Version: 1.0$EOL";
  $headers .= "Content-Type: multipart/mixed; boundary=\"$uid\"$EOL$EOL";
  $headers .= "This is a multi-part message in MIME format.$EOL";
  $headers .= "--$uid$EOL";
  $headers .= "Content-type:text/html; charset=iso-8859-1$EOL";
  $headers .= "Content-Transfer-Encoding: 7bit$EOL$EOL";
  $headers .= str_replace($EOL, '<br />', $message) . "$EOL$EOL";
  $headers .= "--$uid$EOL";
  $headers .= "Content-Type: $ftype; name=\"" . basename($fileatt) . "\"$EOL";
  $headers .= "Content-Transfer-Encoding: base64$EOL";
  $headers .= "Content-Disposition: attachment; filename=\"" . basename($fileatt) . "\"$EOL$EOL";
  $headers .= "$content$EOL$EOL";
  $headers .= "--$uid--";

  // send mail
  return mail($to, $subject, $message, $headers);
}

/**
 * UTILITY: Load a team record
 */
function summergame_team_load($tid) {
  $result = db_query('SELECT * FROM {sg_teams} WHERE tid = %d', $tid);
  return db_fetch_array($result);
}

function summergame_team_access($tid) {
  $access = FALSE;

  if (user_access('administer summergame')) {
    $access = TRUE;
  }
  else {
    global $user;
    if ($user->uid) {
      $team = summergame_team_load($tid);
      if ($user->uid == $team['uid']) {
        $access = TRUE;
      }
    }
  }
  return $access;
}

function summergame_team_members($tid) {
  $members = array();

  $result = db_query('SELECT * FROM sg_players, sg_players_teams ' .
                     'WHERE sg_players.pid = sg_players_teams.pid ' .
                     'AND tid = %d', $tid);
  while ($row = db_fetch_array($result)) {
    $members[$row['pid']] = $row;
  }

  return $members;
}

/**
 * UTILITY: Save a team record
 */
function summergame_team_save($team) {
  $query = array();
  $params = array();

  if ($tid = $team['tid']) {
    // Update existing team record
    unset($team['tid']);
    foreach ($team as $key => $value) {
      if (strtoupper($value) == 'NULL') {
        $query[] = $key . ' = NULL';
      }
      else {
        $query[] = $key . ' = ' . (is_numeric($value) ? '%d' : "'%s'");
        $params[] = $value;
      }
    }
    $params[] = $tid;
    db_query('UPDATE sg_teams SET ' . implode($query, ', ') . ' WHERE tid = %d', $params);
  }
  else {
    // New team record
    foreach ($team as $key => $value) {
      $query[] = $key . ' = ' . (is_numeric($value) ? '%d' : "'%s'");
      $params[] = $value;
    }
    db_query('INSERT INTO sg_teams SET ' . implode($query, ', '), $params);
    $tid = db_last_insert_id('sg_teams', 'tid');
  }

  return summergame_team_load(array('tid' => $tid));
}

/**
 * UTILITY: Delete a team record
 *
 * Uses the same argument as summergame_team_load
 */
function summergame_team_delete($tid) {
  if ($team = summergame_team_load($tid)) {
    // Delete members
    db_query("DELETE FROM sg_players_teams WHERE tid = %d", $team['tid']);
    // Delete team info
    db_query("DELETE FROM sg_teams WHERE tid = %d", $team['tid']);
  }
}

function summergame_team_form($form_state, $tid = 0) {
  global $user;
  $team = summergame_team_load($tid);
  $form = array();

  if ($team['tid']) {
    if (!summergame_team_access($team['tid'])) {
      drupal_set_message("You do not have acess to this team", 'warning');
      drupal_goto('summergame/teams');
    }
    $form['tid'] = array(
      '#type' => 'value',
      '#value' => $team['tid'],
    );
    $submit_text = 'Save Team Changes';
  }
  else {
    $submit_text = 'Create New Team';
  }
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => ($team['uid'] ? $team['uid'] : $user->uid),
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Name'),
    '#default_value' => $team['name'],
    '#size' => 30,
    '#maxlength' => 128,
    '#description' => t('Name for your team for leaderboards'),
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => 'Description',
    '#default_value' => $team['description'],
    '#description' => t('More details about your team if needed'),
  );
  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Team Code'),
    '#default_value' => $team['code'],
    '#size' => 16,
    '#maxlength' => 32,
    '#description' => t('Want to control who joins your group? Enter a team code to restrict membership. Leave it blank to let anyone join.'),
  );
  $form['inline'] = array(
    '#prefix' => "<div class=\"container-inline\">",
    '#suffix' => "</div>",
  );
  $form['inline']['submit'] = array(
    '#type' => 'submit',
    '#value' => t($submit_text),
  );
  if ($team['tid']) {
    $form['inline']['cancel'] = array(
      '#value' => l('Cancel', 'summergame/team/' . $team['tid']),
    );
  }

  return $form;
}

function summergame_team_form_submit($form, &$form_state) {
  $team = array(
    'tid' => $form_state['values']['tid'],
    'uid' => $form_state['values']['uid'],
    'name' => $form_state['values']['name'],
    'description' => $form_state['values']['description'],
    'code' => $form_state['values']['code'],
  );

  $team = summergame_team_save($team);

  drupal_goto('summergame/team/' . $team['tid']);
}

function summergame_teams_list($search = NULL) {
  $content .= '<ul style="float: right">' .
              '<li class="button">' .
              l('Create a New Team', 'summergame/team/edit') .
              '</li>' .
              '</ul>';

  $content .= '<h1>Teams List</h1>';

  $res = db_query("SELECT * FROM sg_teams ORDER BY name ASC");
  while ($team = db_fetch_array($res)) {
    $member_count = count(summergame_team_members($team['tid']));
    $content .= '<p>';
    $content .= '<h2 class="title">' .
                l($team['name'], 'summergame/team/' . $team['tid']) .
                '</h2>';
    $content .= $member_count . ' team member' . ($member_count == 1 ? '' : 's') . '<br />';
    if ($team['description']) {
      $content .= '<em>' . $team['description'] . '</em>';
    }
    if ($team['code']) {
      $content .= '<br />*This team requires a code to join';
    }
    $content .= '</p>';
  }



  return $content;
}

function summergame_team_page($tid) {
  global $user;
  $team = summergame_team_load($tid);

  if ($team['tid']) {
    drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
    $team['members'] = summergame_team_members($tid);
    foreach (summergame_player_load_all($user->uid) as $user_player) {
      if ($team['members'][$user_player['pid']]) {
        $team_member = TRUE;
      }
    }

    $content .= '<div class="summergame-team-title">';
    $content .= '<ul class="summergame-team-buttons">';
    if ($user->uid == $team['uid']) {
      // User owns this team
      $content .= '<li class="button">' .
                  l('Edit Team Details', 'summergame/team/edit/' . $team['tid']) .
                  '</li>';
    }
    $content .= '<li class="button">' .
                l($team_member ? 'Leave This Team' : 'Join This Team', 'summergame/team/join/' . $team['tid']) .
                '</li>';
    $content .= '</ul>';

    $content .= '<h1>Team ' . $team['name'] . '</h1>';
    if ($team['description']) {
      $content .= '<p>' . $team['description'] . '</p>';
    }
    $content .= '</div>'; // summergame-team-title

    $content .= '<h2>' . count($team['members']) . ' Members:</h2>';
    foreach ($team['members'] as $member) {
      if ($member['show_leaderboard']) {
        $player_name = $member['nickname'] ? $member['nickname'] : $member['name'];
      }
      else {
        $player_name = 'Player #' . $member['pid'];
      }
      if ($member['show_myscore'] || user_access('administer summergame')) {
        $player_name = l($player_name, 'summergame/player/' . $member['pid']);
      }
      $content .= "<p>$player_name</p>";
    }
  }
  else {
    $content .= "<p>No Team with an ID# of $tid could be found.</p>";
  }

  $content .= '<ul>' .
              '<li class="button">' .
              l('Back to Full List of Teams', 'summergame/teams') .
              '</li>' .
              '</ul>';
  return $content;
}

function summergame_team_join_form($form_state, $tid = 0) {
  global $user;
  $player_options = array();
  $player_defaults = array();
  $team = summergame_team_load($tid);

  if ($team['tid']) {
    $team['members'] = summergame_team_members($team['tid']);
    foreach (summergame_player_load_all($user->uid) as $player) {
      $player_options[$player['pid']] = $player['name'];
      if ($team['members'][$player['pid']]) {
        // Already a member
        $player_defaults[] = $player['pid'];
      }
    }

    $form = array();

    $title = '<p style="float: right">' .
             l('Back to the Team page', 'summergame/team/' . $team['tid']) .
             '</p>' .
             '<h1>Join Team ' . $team['name'] . '</h1>';
    if ($team['description']) {
      $title .= '<p>' . $team['description'] . '</p>';
    }
    $form['title'] = array(
      '#value' => $title,
    );
    $form['tid'] = array(
      '#type' => 'value',
      '#value' => $team['tid'],
    );
    $form['pids'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Select players to join this team',
      '#options' => $player_options,
      '#default_value' => $player_defaults,
    );

    if ($team['code']) {
      $form['code'] = array(
        '#type' => 'textfield',
        '#title' => 'Team Code',
        '#size' => 16,
        '#maxlength' => 32,
        '#description' => "This team's membership is restricted, please enter the code to join",
      );
    }
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save Membership',
    );

    return $form;
  }
}

function summergame_team_join_form_submit($form, &$form_state) {
  $team = summergame_team_load($form_state['values']['tid']);
  $team['members'] = summergame_team_members($form_state['values']['tid']);

  foreach ($form_state['values']['pids'] as $pid => $checked) {
    if ($pid == $checked) {
      // Wants to join
      if (empty($team['members'][$pid])) {
        // Not already a member
        if ($team['code']) {
          // Check team code
          if (trim($form_state['values']['code']) == $team['code']) {
            // Join!
            db_query("INSERT INTO sg_players_teams SET pid =  %d, tid = %d", $pid, $team['tid']);
            drupal_set_message('Player #' . $pid . ' joined team ' . $team['name']);
          }
          else {
            drupal_set_message('Sorry, the Team Code you entered is not correct. ' .
                               'Player #' . $pid . ' unable to join team', 'warning');
          }
        }
        else {
          // Public team, go ahead and join
          db_query("INSERT INTO sg_players_teams SET pid =  %d, tid = %d", $pid, $team['tid']);
          drupal_set_message('Player #' . $pid . ' joined team ' . $team['name']);
        }
      }
    }
    else {
      // Doesn't want to be a member
      if (!empty($team['members'][$pid])) {
        // Already a member, wants to leave, don't require code
        db_query("DELETE FROM sg_players_teams WHERE pid = %d AND tid = %d", $pid, $team['tid']);
        drupal_set_message('Player #' . $pid . ' has left team ' . $team['name']);
      }
    }
  }

  drupal_goto('summergame/team/' . $team['tid']);
}
