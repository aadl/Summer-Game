<?php
/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function summergame_help($path, $arg) {
  $content = '';
  switch ($path) {
    case "admin/help#summergame":
      $content = '<p>'. t('Summer Game system') .'</p>';
      break;
  }
  return $content;
}

/**
 * Implementation of hook_perm().
 */
function summergame_perm() {
  return array('access summergame', 'administer summergame');
}

/**
 * Implementation of hook_init()
 * Turns off caching for all summergame pages
 */
function summergame_init() {
  if (strpos($_GET['q'], 'summergame') === 0) {
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Implementation of hook_menu().
 */
function summergame_menu() {
  $items = array();

  $items['summergame/admin'] = array(
    'title' => 'Summer Game Admin',
    'description' => 'Administer the Summer Game',
    'page callback' => 'summergame_admin',
    'access arguments' => array('administer summergame'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['summergame/admin/gamecodes'] = array(
    'title' => 'Administer Game Codes',
    'page callback' => 'summergame_admin_gamecodes',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/add'] = array(
    'title' => 'Add new Summer Game Code',
    'page callback' => 'summergame_admin_edit',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/edit'] = array(
    'title' => 'Edit Summer Game Code',
    'page callback' => 'summergame_admin_edit',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/delete'] = array(
    'title' => 'Delete Summer Game code',
    'page callback' => 'summergame_admin_delete',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/players'] = array(
    'title' => 'Administer Players',
    'page callback' => 'summergame_admin_players',
    'access arguments' => array('administer summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player'] = array(
    'title' => 'Summer Game Player Page',
    'page callback' => 'summergame_player_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/gamecode'] = array(
    'title' => 'Redeem a Summer Game Code',
    'page callback' => 'summergame_player_redeem_page',
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/consume'] = array(
    'title' => 'I Read/Listened/Watched Something',
    'page callback' => 'summergame_player_consume_page',
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/edit'] = array(
    'title' => t('Summer Game Player Information'),
    'page callback' => 'summergame_player_edit_page',
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/deletescore'] = array(
    'title' => t('Delete Player Score'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_delete_score_form'),
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/player/delete'] = array(
    'title' => t('Delete Player'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_delete_player_form'),
    'access callback' => 'summergame_player_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/leaderboard'] = array(
    'title' => 'Summer Game Leaderboard',
    'page callback' => 'summergame_leaderboard_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/badges'] = array(
    'title' => 'Summer Game Badges',
    'page callback' => 'summergame_badges_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/pdf'] = array(
    'title' => t('Summer Game PDF'),
    'page callback' => 'summergame_pdf',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
  );
  $items['summergame/admin/trivia'] = array(
    'title' => t('Trivia Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('summergame_trivia_settings'),
    'access arguments' => array('administer summergame'),
    'description' => 'Settings for the Summer Game Trivia game',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'summergame.trivia.inc',
  );
  $items['summergame/trivia'] = array(
    'title' => t('Summergame Trivia'),
    'page callback' => 'summergame_trivia_page',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
    'file' => 'summergame.trivia.inc',
  );
  $items['summergame/triviaupdate'] = array(
    'page callback' => 'summergame_trivia_update',
    'access arguments' => array('access summergame'),
    'type' => MENU_CALLBACK,
    'file' => 'summergame.trivia.inc',
  );
  return $items;
}

/**
 * PAGE: Summer Game Admin overview
 */
function summergame_admin() {
  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
  $content .= '<div id="summergame-admin-page">';
  $content .= '<h1>Summer Game Admin Page</h1>';

  // Players
  $content .= '<h2 class="title">Players</h2>';
  $content .= drupal_get_form('summergame_player_search_form');
  $content .= '<ul><li class="button green">' . l("Create New Player", 'summergame/admin/players/new') . '</li></ul>';

  // Print game cards
  $content .= '<h2 class="title">Print Game Cards</h2>';
  $content .= '<ul>';
  $content .= '<li class="button green">' . l("Print Teen Game Card", 'summergame/pdf/teen') . '</li>';
  $content .= '<li class="button green">' . l("Print Adult Game Card", 'summergame/pdf/adult') . '</li>';
  $content .= '</ul>';

  // Game Codes
  $content .= '<ul class="create-new-code"><li class="button green">' . l("Create New Game Code", 'summergame/admin/add') . '</li></ul>';
  $content .= '<h2 class="title game-codes">Game Codes</h2>';
  $limit = 25;
  $rows = array();
  $creators = array();
  $res = db_query("SELECT * FROM sg_game_codes ORDER BY created DESC LIMIT $limit");
  while ($game_code = db_fetch_array($res)) {
    // Load creator info
    $creator_uid = $game_code['creator_uid'];
    if (!$creators[$creator_uid]) {
      $creators[$creator_uid] = user_load($creator_uid);
    }
    $creator = $creators[$creator_uid];

    $valid_start = $game_code['valid_start'] ? date('n/d/Y H:i:s', $game_code['valid_start']) : 'Now';
    $valid_end = date('n/d/Y H:i:s', $game_code['valid_end']);
    $rows[] = array(
      'Text' => $game_code['text'],
      'Description' => $game_code['description'],
      'Points' => $game_code['points'],
      'Created' => date('n/d/Y', $game_code['created']),
      'Created By' => $creator->name,
      'Valid Dates' => $valid_start . '-<br />' . $valid_end,
      'Redemptions' => $game_code['num_redemptions'] . ' of ' . $game_code['max_redemptions'],
      'Print Sign' => l('print', 'summergame/pdf/gamecode/' . $game_code['code_id']),
      'Edit' => l('edit', 'summergame/admin/edit/' . $game_code['code_id']),
    );
  }
  $content .= theme('table', array_keys($rows[0]), $rows);
  $more_link = l('See all Game Codes', 'summergame/admin/gamecodes');
  $content .= "<p class=\"more\">Showing latest $limit game codes, $more_link</p>";

  // Badges
  $content .= '<h2 class="title">Badges</h2>';
  $sg_image_path = base_path() . file_directory_path() . '/sg_images/';
  $rows = array();
  $res = db_query("SELECT * FROM sg_badges ORDER BY title ASC");
  while ($badge = db_fetch_array($res)) {
    $rows[] = array(
      'Badge ID' => $badge['bid'],
      'Image' => '<img src="' . $sg_image_path . $badge['image'] . '_100.png">',
      'Title' => '<strong>' . $badge['title'] . '</strong>',
      'Description' => $badge['description'],
      'Formula' => $badge['formula'],
    );
  }
  $content .= theme('table', array_keys($rows[0]), $rows);

  $content .= '</div>'; // #summergame-admin-page

  return $content;
}

/**
 * PAGE: Show all game codes
 */
function summergame_admin_gamecodes() {
  drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
  $content .= '<div id="summergame-admin-page">';

  // Game Codes
  $content .= '<ul class="create-new-code"><li class="button green">' . l("Create New Game Code", 'summergame/admin/add') . '</li></ul>';
  $content .= '<h2 class="title game-codes">Game Codes</h2>';
  $rows = array();
  $creators = array();
  $res = db_query("SELECT * FROM sg_game_codes ORDER BY created DESC");
  while ($game_code = db_fetch_array($res)) {
    // Load creator info
    $creator_uid = $game_code['creator_uid'];
    if (!$creators[$creator_uid]) {
      $creators[$creator_uid] = user_load($creator_uid);
    }
    $creator = $creators[$creator_uid];

    $valid_start = $game_code['valid_start'] ? date('n/d/Y H:i:s', $game_code['valid_start']) : 'Now';
    $valid_end = date('n/d/Y H:i:s', $game_code['valid_end']);
    $rows[] = array(
      'Text' => $game_code['text'],
      'Description' => $game_code['description'],
      'Points' => $game_code['points'],
      'Created' => date('n/d/Y', $game_code['created']),
      'Created By' => $creator->name,
      'Valid Dates' => $valid_start . '-<br />' . $valid_end,
      'Redemptions' => $game_code['num_redemptions'] . ' of ' . $game_code['max_redemptions'],
      'Print Sign' => l('print', 'summergame/pdf/gamecode/' . $game_code['code_id']),
      'Edit' => l('edit', 'summergame/admin/edit/' . $game_code['code_id']),
    );
  }
  $content .= theme('table', array_keys($rows[0]), $rows);
  $content .= '</div>';

  return $content;
}

/**
 * PAGE: Edit a game code
 */
function summergame_admin_edit($code_id = 0) {
  if ($code_id) {
    $game_code = db_fetch_array(db_query("SELECT * FROM sg_game_codes WHERE code_id = %d", $code_id));
  }
  $content .= drupal_get_form('summergame_code_edit_form', $game_code);

  return $content;
}

/**
 * FORM: Edit a game code
 */
function summergame_code_edit_form($form_state, $game_code) {
  $form = array();
  if ($game_code['code_id']) {
    $form['code_id'] = array(
      '#type' => 'value',
      '#value' => $game_code['code_id'],
    );
  }
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Code Text'),
    '#default_value' => $game_code['text'],
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Keyword text for this game code (e.g. APPLESAUCE)'),
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => $game_code['description'],
    '#size' => 64,
    '#maxlength' => 128,
    '#description' => t('Description of the game code award (e.g. Attended Apple Peeling Event)'),
  );
  $form['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Points'),
    '#default_value' => $game_code['points'],
    '#size' => 16,
    '#maxlength' => 8,
    '#description' => t('Points to be awarded for the game code (e.g. 100)'),
  );
  $form['max_redemptions'] = array(
    '#type' => 'select',
    '#title' => t('Max Redemptions'),
    '#default_value' => $game_code['max_redemptions'],
    '#options' => array(
      '0' => t('Unlimited'),
      '1' => t('Single User'),
      '2' => '2',
      '3' => '3',
      '4' => '4',
      '5' => '5',
      '10' => '10',
      '25' => '25',
      '50' => '50',
      '100' => '100',
    ),
    '#description' => t('Number of players who can receive points for this award'),
  );
  $form['valid_start'] = array(
    '#type' => 'textfield',
    '#title' => t('Code Start Time Limit'),
    '#default_value' => date('Y-m-d H:i:s', ($game_code['valid_start'] ? $game_code['valid_start'] : time())),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Date/Time for when the code becomes active (e.g. "2011-07-01 9:00 AM")'),
  );
  $form['valid_end'] = array(
    '#type' => 'textfield',
    '#title' => t('Code End Time Limit'),
    '#default_value' => $game_code['valid_end'] ? date('Y-m-d H:i:s', $game_code['valid_end']) : '2011-09-06 08:00:00',
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t('Date/Time for when the code stops being active (e.g. "2011-09-01 9:00 PM")'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function summergame_code_edit_form_validate($form, &$form_state) {
  // Check whether game code is unique
  if (!$form_state['values']['code_id']) {
    $res = db_query("SELECT code_id FROM sg_game_codes WHERE text LIKE '%s'", $form_state['values']['text']);
    if ($code = db_fetch_object($res)) {
      form_set_error('text', 'Code text is already in use. Please select another code.');
    }
  }
  if (intval($form_state['values']['points']) < 1) {
    form_set_error('points', 'Please enter a number for the point value');
  }
}

function summergame_code_edit_form_submit($form, &$form_state) {
  global $user;

  // Set end time if blank
  if (empty($form_state['values']['valid_end'])) {
    $form_state['values']['valid_end'] = '2011-09-06 08:00:00';
  }
  if ($form_state['values']['code_id']) {
    // Update existing code
    db_query("UPDATE sg_game_codes SET text = '%s', description = '%s', points = %d, max_redemptions = %d, " .
             "valid_start = %d, valid_end = %d WHERE code_id = %d",
             strtoupper($form_state['values']['text']), $form_state['values']['description'], $form_state['values']['points'],
             $form_state['values']['max_redemptions'], strtotime($form_state['values']['valid_start']),
             strtotime($form_state['values']['valid_end']), $form_state['values']['code_id']);
    drupal_set_message('Game Code ' . $form_state['values']['text'] . ' Updated');
  }
  else {
    db_query("INSERT INTO sg_game_codes " .
             "(creator_uid, created, text, description, points, max_redemptions, valid_start, valid_end) " .
             "VALUES (%d, %d, '%s', '%s', %d, %d, %d, %d)",
             $user->uid, time(), strtoupper($form_state['values']['text']), $form_state['values']['description'],
             $form_state['values']['points'], $form_state['values']['max_redemptions'],
             strtotime($form_state['values']['valid_start']), strtotime($form_state['values']['valid_end']));
    drupal_set_message('Game Code ' . $form_state['values']['text'] . ' Created');
  }

  drupal_goto('summergame/admin');
}

/**
 * PAGE: Administer Players
 */
function summergame_admin_players($search_term = '') {
  if ($search_term == 'new') {
    $content .= drupal_get_form('summergame_player_form');
  }
  else {
    $search_term = strtoupper($search_term);
    $params = array();
    $new_player = array();
    $sql = "SELECT * FROM sg_players WHERE 1";

    if (is_numeric($search_term)) {
      // Search phone numbers
      $sql .= " AND phone LIKE '%%%d%%'";
      $params[] = $search_term;
      $new_player['phone'] = $search_term;
    }
    else if (preg_match('/^S?[ART]G[\d]{5}$/', $search_term)) { //SRG12345, TG12345, AG12345
      $sql .= " AND gamecard LIKE '%%%s%%'";
      $params[] = $search_term;
      $new_player['gamecard'] = $search_term;
    }
    else if ($search_term) {
      $sql .= " AND (name LIKE '%%%s%%' OR nickname LIKE '%%%s%%')";
      $params[] = $search_term;
      $params[] = $search_term;
      $new_player['name'] = $search_term;
    }

    // Run the search
    $res = db_query($sql, $params);
    $count = mysqli_num_rows($res);

    if ($count == 0) {
      // No matches, create a new player
      drupal_set_message("No existing players to match your search \"$search_term\". Create a new player with that information below:");
      $content .= drupal_get_form('summergame_player_form', $new_player);
    }
    else if ($count == 1) {
      // Exact match, goto the existing player page
      $player = db_fetch_array($res);
      drupal_set_message("Single Player Found to match your search: \"$search_term\". Edit player information below:");
      drupal_goto('summergame/player/edit/' . $player['pid']);
    }
    else if ($count > 25) {
      $content .= "<h2>Your search returned more than 25 matches: ($count)<h2>";
      $content .= "<h3>Please search again</h3>";
      $content .= drupal_get_form('summergame_player_search_form');
    }
    else {
      // Found 2-25 matches, display them in a table
      $content .= "<h2>Your search returned $count matches</h2>";
      while ($player = db_fetch_array($res)) {
        // Prep for display
        $account = $player['uid'] ? user_load($player['uid']) : NULL;

        $show = array();
        if ($player['leaderboard']) {
          $show[] = 'Public Leaderboard';
        }
        if ($player['myscore']) {
          $show[] = 'Player Score Page';
        }
        if ($player['public']) {
          $show[] = 'Name Display';
        }
        $rows[] = array(
          'Name' => $player['name'],
          'Nickname' => $player['nickname'],
          'Web User' => $account->name,
          'Phone' => $player['phone'] ? $player['phone'] : '',
          'Age Group' => $player['agegroup'],
          'School' => $player['school'],
          'Grade' => $player['grade'],
          'Show On' => implode(', ', $show),
          'Edit Player' => l('Edit', 'summergame/player/edit/' . $player['pid']),
          'Scorecard' => l('Scorecard', 'summergame/player/' . $player['pid']),
        );
      }
      $content .= theme('table', array_keys($rows[0]), $rows);
      $content .= '<ul><li class="button green">' . l("Create New Player", 'summergame/admin/players/new') . '</li></ul>';
    }
  }

  return $content;
}

/**
 * FORM: Player search form
 */
function summergame_player_search_form($form_state) {
  $form = array();
  $form['inline'] = array(
    '#prefix' => "<div class=\"container-inline\">",
    '#suffix' => "</div>",
  );
  $form['inline']['search_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Search for a Player'),
    '#size' => 32,
    '#maxlength' => 32,
  );
  $form['inline']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

function summergame_player_search_form_submit($form, &$form_state) {
  drupal_goto('summergame/admin/players/' . $form_state['values']['search_term']);
}

/**
 * FORM: Redeem a game code
 */
function summergame_redeem_form($form_state, $pid) {
  $form = array(
    '#prefix' => "<div class=\"container-inline\">",
    '#suffix' => "</div>",
  );
  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );
  $form['code_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Code Text'),
    '#size' => 32,
    '#maxlength' => 32,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['cancel'] = array(
    '#value' => l('Cancel', 'summergame/player/' . $pid),
  );

  return $form;
}

function summergame_redeem_form_submit($form, &$form_state) {
  $status = summergame_redeem_code($form_state['values']['pid'], $form_state['values']['code_text']);
  if ($status['error']) {
    drupal_set_message($status['error'], 'error');
  }
  else if ($status['warning']) {
    drupal_set_message($status['warning'], 'warning');
  }
  else if ($status['success']) {
    drupal_set_message($status['success']);
  }
  drupal_goto('summergame/player/' . $form_state['values']['pid']);
}

/**
 * FORM: Report consumption of media
 */
function summergame_consume_form($form_state, $pid, $bnum = 0) {
  $locum = sopac_get_locum();
  $form = array();
  $bib = array();

  if ($bnum) {
    if ($bib = $locum->get_bib_item($bnum)) {
      $form['bib'] = array(
        '#type' => 'value',
        '#value' => $bib,
      );
      $title = title_case($bib['title']);
      if ($bib['title_medium']) {
        $title .= ' ' . title_case($bib['title_medium']);
      }
      $finished_default = 1;
    }
  }

  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );
  $form['mat_code'] = array(
    '#type' => 'select',
    '#title' => t("I've been enjoying this"),
    '#default_value' => $bib['mat_code'],
    '#options' => $locum->locum_config['formats'],
    '#prefix' => "<div class=\"container-inline\">",
    '#suffix' => "</div>",
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Titled'),
    '#default_value' => $title,
    '#size' => 64,
    '#maxlength' => 64,
    '#description' => t('Title of the Book/Movie/Music that you are reporting'),
    '#required' => TRUE,
  );
  $form['duration'] = array(
    '#type' => 'textfield',
    '#title' => t('for this many minutes or pages (optional)'),
    '#size' => 16,
    '#maxlength' => 16,
    '#description' => t('Enter the # of pages OR the length in minutes for 1 point per page or minute! (Maximum 500 points)'),
  );
  $form['finished'] = array(
    '#type' => 'checkbox',
    '#title' => 'and I finished it!',
    '#default_value' => $finished_default,
    '#description' => 'check this box to receive a 100 point bonus for finishing this item (optional)',
  );
  $form['inline'] = array(
    '#prefix' => "<div class=\"container-inline\">",
    '#suffix' => "</div>",
  );
  $form['inline']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Score!'),
  );
  $form['inline']['cancel'] = array(
    '#value' => l('Cancel', 'summergame/player/' . $pid),
  );

  return $form;
}

function summergame_consume_form_submit($form, &$form_state) {
  $points = 0;
  $pid = $form_state['values']['pid'];
  $title = $form_state['values']['title'];
  $description = $title;
  if ($form_state['values']['bib']) {
    // Use the trusted bnum as the id instead of a user-entered id
    $description .= ' bnum:' . $form_state['values']['bib']['bnum'];
  }
  else if ($form_state['values']['id']) {
    $description .= ' id:' . $form_state['values']['id'];
  }
  // Duration score
  if ($form_state['values']['duration']) {
    $points += min($form_state['values']['duration'], 500);
  }
  // Finish score
  if ($form_state['values']['finished']) {
    $points += 100;
  }
  $points = summergame_player_points($pid, $points, 'mat_code:' . $form_state['values']['mat_code'], $description);
  drupal_set_message("Earned $points points for $title");
  drupal_goto('summergame/player/' . $pid);
}

/**
 * FORM: Player information
 */
function summergame_player_form($form_state, $player = NULL) {
  drupal_add_js(drupal_get_path('module', 'summergame') . '/summergame.player.js');
  $form = array();

  if ($player['pid']) {
    $form['pid'] = array(
      '#type' => 'value',
      '#value' => $player['pid'],
    );
    $form['title'] = array(
      '#value' => '<p style="float: right">' .
                  l('Back to Player Score Card page', 'summergame/player/' . $player['pid']) .
                  '</p>' .
                  '<h1>Edit Summer Game Player Information</h1>',
    );
    $submit_text = 'Save Player Changes';
  }
  else {
    $form['title'] = array(
      '#value' => '<h1>Summer Game Player Signup</h1>',
    );
    $submit_text = 'Sign Up!';
  }

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $player['name'],
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Enter your real name'),
  );
  $form['nickname'] = array(
    '#type' => 'textfield',
    '#title' => t('Nickname'),
    '#default_value' => $player['nickname'],
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Enter an optional nickname (will be used for public display if allowed)'),
  );
  if (user_access('administer summergame')) {
    $form['phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone Number'),
      '#default_value' => $player['phone'],
      '#size' => 30,
      '#maxlength' => 64,
      '#description' => t('Enter a phone number to play by text message (rates may apply)'),
    );
  }
  $form['gamecard'] = array(
    '#type' => 'textfield',
    '#title' => t('Summer Game Card Number'),
    '#default_value' => $player['gamecard'],
    '#size' => 16,
    '#maxlength' => 16,
    '#description' => t('Did you pick up a score card? Enter its number here to help us track your progress'),
  );
  // Set up privacy default values
  $privacy_defaults = array();
  if ($player['show_leaderboard']) {
    $privacy_defaults[] = 'show_leaderboard';
  }
  if ($player['show_myscore']) {
    $privacy_defaults[] = 'show_myscore';
  }
  if ($player['show_titles']) {
    $privacy_defaults[] = 'show_titles';
  }
  $form['privacy'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Privacy Options',
    '#options' => array(
      'show_leaderboard' => 'Show my nickname and total score on the public leaderboard',
      'show_myscore' => 'Allow others to see my summer game scores and awards page',
      'show_titles' => 'Display the titles of Books/Movies/Music on my Score Card for others to see',
    ),
    '#default_value' => $privacy_defaults,
    '#description' => 'Select what other people can see about your Summer Game progress',
  );
  $form['agegroup'] = array(
    '#type' => 'select',
    '#title' => t('Age Group'),
    '#default_value' => $player['pid'] ? $player['agegroup'] : 'adult',
    '#options' => array(
      'youth' => 'Youth',
      'teen' => 'Teen',
      'adult' => 'Adult'
    ),
    '#description' => 'Select your age group for prizes',
    '#attributes' => array('onChange' => 'checkForSchool(this)'),
  );
  if ($player['agegroup'] == 'youth' || $player['agegroup'] == 'teen') {
    $school_style = 'display: block';
  }
  else {
    $school_style = 'display: none';
  }

  $form['school_info'] = array(
    '#prefix' => '<div id="school-details-div" style="' . $school_style . '">',
    '#suffix' => '</div>',
  );
  $school_autocomplete = array();
  $res = db_query('SELECT name FROM sg_schools ORDER BY name ASC');
  while ($school = db_fetch_object($res)) {
    $school_autocomplete[] = $school->name;
  }
  $form['school_info']['school'] = array(
    '#type' => 'autocomplete',
    '#data' => $school_autocomplete,
    '#title' => t('School'),
    '#default_value' => $player['school'],
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Are you a student? Please enter the name of your school to help us know'),
  );
  $form['school_info']['grade'] = array(
    '#type' => 'select',
    '#title' => t('Grade'),
    '#default_value' => $player['grade'],
    '#options' => array(
      '' => 'N/A',
      -1 => 'Preschool',
      0  => 'Kindergarten',
      1  => '1st Grade',
      2  => '2nd Grade',
      3  => '3rd Grade',
      4  => '4th Grade',
      5  => '5th Grade',
      6  => '6th Grade',
      7  => '7th Grade',
      8  => '8th Grade',
      9  => '9th Grade',
      10 => '10th Grade',
      11 => '11th Grade',
      12 => '12th Grade',
    ),
    '#description' => t('Please let us know your upcoming grade if you\'re a student'),
  );

  if (user_access('administer users')) {
    $form['uid'] = array(
      '#type' => 'textfield',
      '#title' => t('User ID'),
      '#default_value' => $player['uid'],
      '#size' => 8,
      '#maxlength' => 8,
      '#description' => t("AADL.org Account's User ID to connect this player (find it with " . l('Accountfix', 'accountfix') . " if needed)"),
    );
  }
  else if ($player['uid']) {
    $form['uid'] = array(
      '#type' => 'value',
      '#value' => $player['uid'],
    );
  }

  if (user_access('administer summergame')) {
    // Set up default values
    $prize_array = summergame_get_prize_array();
    $default_prizes = array();
    $completed = FALSE;

    foreach ($prize_array as $prize_code => $prize_name) {
      if (strpos($player['prizes'], $prize_code) !== FALSE ) {
        $default_prizes[$prize_code] = $prize_code;
        if ($prize_code != 'bucket' && $prize_code != 'silly') {
          $completed = TRUE;
        }
      }
      else {
        $default_prizes[$prize_code] = 0;
      }
    }
    $form['prizes'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Staff Only: CHECK PRIZE GIVEN WHEN GAME IS COMPLETED'),
      '#options' => $prize_array,
      '#default_value' => $default_prizes,
    );
    $form['completed'] = array(
      '#type' => 'value',
      '#value' => $completed,
    );
  }
  $form['inline'] = array(
    '#prefix' => "<div class=\"container-inline\">",
    '#suffix' => "</div>",
  );
  $form['inline']['submit'] = array(
    '#type' => 'submit',
    '#value' => t($submit_text),
  );
  $form['inline']['cancel'] = array(
    '#value' => l('Cancel', 'summergame/player/' . $player['pid']),
  );
  if ($player['pid']) {
    $form['inline']['delete'] = array(
      '#value' => l('Delete Player',
                    'summergame/player/delete/' . $player['pid'],
                    array('attributes' => array('style' => 'padding-left: 100px; color: red'))
                    ),
    );
  }

  return $form;
}

function summergame_player_form_submit($form, &$form_state) {
  $player_info = array(
    'name' => $form_state['values']['name'],
    'nickname' => $form_state['values']['nickname'],
    'gamecard' => strtoupper($form_state['values']['gamecard']),
    'agegroup' => $form_state['values']['agegroup'],
    'school' => $form_state['values']['school'],
    'phone' => 'NULL', // default, handled below
  );

  // Special field handling
  if ($form_state['values']['phone']) {
    $phone = preg_replace('/[^\d]/', '', $form_state['values']['phone']);
    if (strlen($phone) == 7) {
      // preface with local area code
      $phone = '1734' . $phone;
    }
    else if (strlen($phone) == 10) {
      // preface with a 1
      $phone = '1' . $phone;
    }
    $player_info['phone'] = $phone;
  }
  $player_info['grade'] = ($form_state['values']['grade'] == '' ? 'NULL' : $form_state['values']['grade']);

  foreach ($form_state['values']['privacy'] as $name => $value) {
    $player_info[$name] = ($value ? 1 : 0);
  }

  $completed = FALSE;
  if ($form_state['values']['prizes']) {
    $prizes = array();
    foreach ($form_state['values']['prizes'] as $prize) {
      if ($prize) {
        $prizes[] = $prize;
        if ($prize != 'bucket' && $prize != 'silly') {
          $completed = TRUE;
        }
      }
    }
    $player_info['prizes'] = implode(',', $prizes);
  }

  if ($form_state['values']['uid']) {
    $player_info['uid'] = $form_state['values']['uid'];
  }

  if ($form_state['values']['pid']) {
    $player_info['pid'] = $form_state['values']['pid'];
  }
  else {
    $new_player = TRUE;
  }

  $player = summergame_player_save($player_info);

  if ($new_player) {
    $points = summergame_player_points($player['pid'], 100, 'Signup',
                                       'Signed Up for the Summer Game');
    drupal_set_message("Earned $points Summer Game points for signing up!");
  }

  // Game Completion Bonus
  if ($completed && !($form_state['values']['completed'])) {
    $points = summergame_player_points($player['pid'], 1000, 'Completed',
                                       'Completed the Classic Summer Game');
    drupal_set_message("Earned $points Summer Game points for completing the Classic Summer Game");
  }

  drupal_goto('summergame/player/' . $player['pid']);
}

/**
 * FORM: Delete Player form
 */
function summergame_delete_player_form(&$form_state, $pid = 0) {
  if ($player = summergame_player_load(array('pid' => $pid))) {
    $form = array();
    $form['#player'] = $player;
    $player_name = ($player['nickname'] ? $player['nickname'] : $player['name']);
    $prompt = "Are you sure you want to delete player $player_name? All associated scores and badges will be deleted as well. ";

    return confirm_form(
      $form,
      $prompt,
      'summergame/player/' . $pid,
      $prompt . ' ' . t('This action cannot be undone.'),
      t('Delete'),
      t('Cancel'),
      'summergame_delete_player_form'
    );
  }
}

function summergame_delete_player_form_submit($form, &$form_state) {
  $player = $form['#player'];
  summergame_player_delete(array('pid' => $player['pid']));
  $player_name = ($player['nickname'] ? $player['nickname'] : $player['name']);
  drupal_set_message("Deleted player $player_name and all associated points and badges");
  drupal_goto('summergame/player');
}

/**
 * FORM: Delete score form
 */
function summergame_delete_score_form(&$form_state, $pid = 0, $lid = 0) {
  $ledger = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d AND lid = %d", $pid, $lid));

  // Cannot delete points from the Shop
  if (strpos($ledger->code_text, 'Shop') === 0) {
    drupal_set_message('You cannot delete points from the Shop', 'error');
    drupal_goto('summergame/player/' . $pid);
  }

  $form = array();
  $form['#ledger'] = $ledger;
  $description = trim(preg_replace('/[\w]+:[\w]+/', '', $ledger->description));
  $prompt = "Are you sure you want to delete $ledger->points points for \"$description\"?";

  return confirm_form(
    $form,
    $prompt,
    'summergame/player/' . $pid,
    $prompt . ' ' . t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel'),
    'summergame_delete_score_form'
  );
}

/**
 * FORM HANDLER: Delete score and return player to their page
 */
function summergame_delete_score_form_submit($form, &$form_state) {
  $ledger = $form['#ledger'];
  db_query("DELETE FROM sg_ledger WHERE lid = %d", $ledger->lid);
  drupal_set_message("Removed score worth $ledger->points from your player score card");
  drupal_goto('summergame/player/' . $ledger->pid);
}

/**
 * PAGE: Summer Game Player Account page
 */
function summergame_player_page($pid = 0) {
  global $user, $_domain;

  // Redirect to the right domain
  if ($sg_did = variable_get('summergame_default_domain_id', FALSE)) {
    $summergame_domain = domain_load($sg_did);
    domain_goto($summergame_domain);
  }

  if ($user->uid && $pid === 'extra') {
    if ($player = summergame_player_load(array('uid' => $user->uid))) {
      drupal_set_message("Use the form below to add an extra player to your website account. " .
                         "You will be able to enter game codes and report reading / listening / " .
                         "watching activities for points. However this player won't receive " .
                         "points for website contributions such as commenting, tagging or writing reviews. " .
                         "If you wish this player to receive points for website contributions, please log " .
                         "out and create a new aadl.org account before signing up for the Summer Game.");
      $new_player = array('uid' => $user->uid);
      $content = drupal_get_form('summergame_player_form', $new_player);
    }
    else {
      // If no player has signed up yet, redirect to the player page
      drupal_goto('summergame/player');
    }
  }
  else {
    $pid = intval($pid);

    if ($pid) {
      $player = summergame_player_load(array('pid' => $pid));
    }
    else if ($user->uid) {
      // Default to the logged in player if none specified
      $player = summergame_player_load(array('uid' => $user->uid));
    }

    if ($player) {
      $player_access = summergame_player_access($player['pid']);
      // Check if player's score card is private and we don't have access
      if (!$player['show_myscore'] && !$player_access) {
        drupal_set_message("Player #$pid's Score Card is private", 'error');
        drupal_goto('summergame');
      }

      // Update checkout history for logged in user
      if ($user->uid && $player['uid'] == $user->uid && $user->profile_cohist) {
        $ch_list = db_fetch_array(db_query("SELECT * FROM sopac_lists WHERE uid = %d AND title = 'Checkout History' LIMIT 1", $user->uid));
        if ($ch_list['list_id']) {
          sopac_update_history($ch_list);
        }
      }

      // Player Title
      $player_points = summergame_get_player_points($player['pid']);
      drupal_add_css(drupal_get_path('module', 'summergame') . '/summergame.css');
      $playername = $player['pid'] . ': ' . ($player['nickname'] ? $player['nickname'] : $player['name']);
      $content .= '<div id="summergame-player-page">';
      $content .= "<h1>Summer Game Player #$playername (" . $player_points['total'] . " points)</h1>";
      if ($player['uid'] == $user->uid) {
        $content .= "<p><em>that's you!</em> ";
        $extra_link = l('Sign up an extra player', 'summergame/player/extra');
        $content .= "Want to record another player's reading/listening/watching activity and game codes? $extra_link.</p>";
      }

      // Player Details
      if ($player_access) {
        $content .= theme_summergame_player_info($player);
        // Extra Players if player has web account
        if ($player['uid']) {
          $all_players = summergame_player_load_all($player['uid']);
          // pop first player off the list to determine primary player
          $primary_player = array_shift($all_players);

          if (count($all_players)) {
            if ($player['pid'] == $primary_player['pid']) {
              // We're on the primary player page
              foreach ($all_players as $extra_player) {
                if ($extra_player['pid'] != $player['pid']) {
                  // Show Extra Player Info
                  $extra_player_points = summergame_get_player_points($extra_player['pid']);
                  $extra_playername = $extra_player['nickname'] ? $extra_player['nickname'] : $extra_player['name'];
                  $extra_playername = l($extra_playername, 'summergame/player/' . $extra_player['pid']);
                  $content .= '<div id="summergame-extra-player">';
                  $content .= "<h1>Extra Player: $extra_playername (" . $extra_player_points['total'] . " points)</h1>";
                  $content .= theme_summergame_player_info($extra_player);
                  $content .= '</div>';
                }
              }
            }
            else {
              // We're on an extra player page
              $content .= '<p>[ ' . l('Return to main player page', 'summergame/player/' . $primary_player['pid']) . ' ]</p>';
            }
          }
        }
      }

      // Badges
      $content .= '<div id="player-badges">';
      $content .= '<h1>Badges</h1>';
      $sg_image_path = base_path() . file_directory_path() . '/sg_images/';
      $badge_grid = '';
      $res = db_query("SELECT * FROM sg_players_badges, sg_badges WHERE sg_players_badges.pid = %d AND sg_players_badges.bid = sg_badges.bid", $player['pid']);
      while ($badge = db_fetch_array($res)) {
        $img_title = $badge['title'] . "\n" . $badge['description'] . "\n" . 'Received on ' . date('F j, Y g:i A', $badge['timestamp']);
        $badge_grid .= '<img title="' . $img_title . '" src="' . $sg_image_path . $badge['image'] . '_100.png">';
      }
      $content .= ($badge_grid ? $badge_grid : "<p>This player hasn't earned any badges yet.</p>");

      $content .= '<p>[ ' . l('See All Available Badges', 'summergame/badges') . ' ]</p>';
      $content .= '</div>';

      // Player Score
      $locum = sopac_get_locum();
      $content .= '<h1>Score Card</h1>';

      $score_table = array();
      foreach ($player_points['ledger'] as $ledger_row) {
        // Translate material code to catalog material type
        if (preg_match('/mat_code:([a-z])/', $ledger_row['code_text'], $matches)) {
          $ledger_row['code_text'] = 'Points for ' .
                              $locum->locum_config['formats'][$matches[1]];
        }
        // Change bnum: code to a link to the bib record
        if (preg_match('/bnum:([\d]{7})/', $ledger_row['description'], $matches)) {
          $ledger_row['description'] = trim(str_replace($matches[0], '', $ledger_row['description']));
          $ledger_row['description'] = l($ledger_row['description'], 'http://www.aadl.org/catalog/record/' . $matches[1]);
        }
        // Strip the nid: and id: code from the description field
        $description = preg_replace('/n?id:[^\s]+/', '', $ledger_row['description']);
        // Obscure game codes
        if (!$player_access) {
          $code_check = db_fetch_object(db_query("SELECT code_id FROM sg_game_codes WHERE text = '%s'", $ledger_row['code_text']));
          if ($code_check->code_id) {
            $ledger_row['code_text'] = '[GAME CODE]';
          }
        }
        $table_row = array(
          'Date' => date('F j, Y, g:i a', $ledger_row['timestamp']),
          'Code' => $ledger_row['code_text'],
          'Description' => ($player['show_titles'] || $player_access ? $description : ''),
          'Points' => $ledger_row['points'],
        );
        if ($player_access) {
          if (strpos($ledger_row['code_text'], 'Shop') === 0) {
            // No delete link for shop points
            $table_row['Remove?'] = '';
          }
          else {
            $table_row['Remove?'] = l('DELETE', 'summergame/player/deletescore/' . $player['pid'] . '/' . $ledger_row['lid']);
          }
        }
        $score_table[] = $table_row;
      }
      if (count($score_table)) {
        $total_row = array(
          array(
            'data' => '<strong>Current Balance:</strong>',
            'colspan' => 3,
            'style' => 'text-align: right',
          ),
          '<strong>' . $player_points['balance'] . '</strong>',
        );
        if ($player_access) {
          // Add an extra cell in the total row to line up with the Delete column
          $total_row[] = '';
        }
        $score_table[] = $total_row;
        $content .= theme('table', array_keys($score_table[0]), $score_table);
      }
      $content .= '<div id="scorecard-total">';
      $content .= "<h1>Total Points Earned: " . $player_points['total'] . "</h1>";
      $content .= '</div>'; // #scorecard-total

      $content .= '</div>'; // #summergame-player-page
    }
    else {
      // invalid PID or not authorized
      if ($pid) {
        drupal_set_message('Invalid Player ID: ' . $pid, 'error');
        drupal_goto('summergame');
      }
      else {
        if ($user->uid) {
          $new_player = array('uid' => $user->uid);
          $content = drupal_get_form('summergame_player_form', $new_player);
        }
        else {
          drupal_goto('https://www.aadl.org/login', array('destination' => 'summergame/player'));
        }
      }
    }
  }

  return $content;
}

/**
 * UTILITY: Theme player info table
 */
function theme_summergame_player_info($player) {
  // Link to Points Forms
  $content .= '<div id="player-earn-links">';
  $content .= '<h2>Earn Game Points:</h2>';
  $content .= '<ul>';
  $content .= '<li class="button">' . l('I have a Game Code!', 'summergame/player/gamecode/' . $player['pid']) . '</li>';
  $content .= '<li class="button">' . l('I Read, Listened to, or Watched something!', 'summergame/player/consume/' . $player['pid']) . '</li>';
  $content .= '</ul>';
  $content .= '</div>';

  // Translate privacy details
  $privacy_details .= '<ul>';
  if ($player['show_leaderboard']) {
    $privacy_details .= '<li>Show Nickname & Total Score on Public Leaderboard</li>';
  }
  if ($player['show_myscore']) {
    $privacy_details .= '<li>Show Player Page Score Card and Badges</li>';
  }
  if ($player['show_titles']) {
    $privacy_details .= '<li>Show Titles of Books/Movies/Music in the Score Card</li>';
  }
  $privacy_details .= '</ul>';

  $player_table = array(
    array('<strong>Real Name:</strong>', $player['name']),
    array('<strong>Nickname:</strong>', $player['nickname']),
    array('<strong>Cell Phone:</strong>', $player['phone']),
    array('<strong>Game Card:</strong>', $player['gamecard']),
    array('<strong>Age Group:</strong>', ucwords($player['agegroup'])),
    array('<strong>Privacy Options:</strong>', $privacy_details),
  );

  // Lookup drupal user if admin
  if (user_access('administer summergame')) {
    if ($account = user_load(array('uid' => $player['uid']))) {
      $player_table[] = array(
        '<strong>Website User:</strong>',
        user_access('administer users') ? l($account->name, 'user/' . $account->uid) : $account->name,
      );
    }
  }

  $header = array(
    'Player Details',
    array(
      'data' => '[ ' . l('Edit Player Info', 'summergame/player/edit/' . $player['pid']) . ' ]',
      'style' => 'text-align: right',
    ),
  );

  $content .= '<div id="player-info-table">';
  $content .= theme('table', $header, $player_table);
  $content .= '</div>';

  return $content;
}

/**
 * PAGE: Player Edit page
 */
function summergame_player_edit_page($pid = 0) {
  $pid = intval($pid);
  if ($pid) {
    $player = summergame_player_load(array('pid' => $pid));
    $content .= drupal_get_form('summergame_player_form', $player);
  }
  else {
    drupal_goto('summergame/player');
  }

  return $content;
}

/**
 * PAGE: Game Code Redeem Page
 */
function summergame_player_redeem_page($pid = 0) {
  if ($pid) {
    if (summergame_player_access($pid)) {
      $player = summergame_player_load(array('pid' => $pid));
    }
    else {
      drupal_set_message("Invalid ID or no access for player #$pid", 'error');
      drupal_goto('summergame/player');
    }
  }
  else {
    // try to default to the logged in player
    global $user;
    $player = summergame_player_load(array('uid' => $user->uid));
    if (empty($player)) {
      drupal_set_message("No player found for your logged in account", 'error');
      drupal_goto('summergame/player');
    }
  }

  $content .= '<h1>Redeem a Game Code for ' . ($player['nickname'] ? $player['nickname'] : $player['name']) . '</h1>';
  $content .= '<p>You can find game codes for attending events, or by finding them around the library.</p>';
  $content .= drupal_get_form('summergame_redeem_form', $player['pid']);

  return $content;
}

/**
 * PAGE: Game Code Redeem Page
 */
function summergame_player_consume_page($pid = 0, $bnum = 0) {
  if ($pid) {
    if (summergame_player_access($pid)) {
      $player = summergame_player_load(array('pid' => $pid));
    }
    else {
      drupal_set_message("Invalid ID or no access for player #$pid", 'error');
      drupal_goto('summergame/player');
    }
  }
  else {
    // try to default to the logged in player
    global $user;
    $player = summergame_player_load(array('uid' => $user->uid));
    if (empty($player)) {
      drupal_set_message("No player found for your logged in account", 'error');
      drupal_goto('summergame/player');
    }
  }

  $content .= '<h1>Score Points for ' . ($player['nickname'] ? $player['nickname'] : $player['name']) . ':</h1>';
  $content .= '<p>Did you read a book, listen to a CD, or watch a DVD? Enjoyed another item? Report it here to earn points:</p>';
  $content .= '<p><em>HINT: If you are reporting an item from our catalog, click the "I FINISHED THIS" button on the full catalog page to automatically fill this form.</em></p>';
  $content .= drupal_get_form('summergame_consume_form', $player['pid'], $bnum);

  return $content;
}

/**
 * PAGE: Leaderboard Page
 */
function summergame_leaderboard_page() {
  $content .= '<h1>Summer Game Leaderboard</h1>';

  $leader_query = 'SELECT *, SUM(points) AS ptotal ' .
                  'FROM sg_players, sg_ledger ' .
                  'WHERE sg_players.pid = sg_ledger.pid ' .
                  'AND sg_ledger.points > 0 ' .
                  'GROUP BY sg_players.pid ' .
                  'ORDER BY ptotal DESC ' .
                  'LIMIT 100';
  $res = db_query($leader_query);

  $leaderboard = array();
  $place = 0;
  while ($lb_player = db_fetch_array($res)) {
    if ($lb_player['show_leaderboard']) {
      $player_name = $lb_player['nickname'] ? $lb_player['nickname'] : $lb_player['name'];
    }
    else {
      $player_name = 'Player #' . $lb_player['pid'];
    }
    if ($lb_player['show_myscore'] || user_access('administer summergame')) {
      $player_name = l($player_name, 'summergame/player/' . $lb_player['pid']);
    }
    $leaderboard[] = array(
      'Place' => ++$place,
      'Player' => $player_name,
      'Total Score' => $lb_player['ptotal'],
    );
  }
  $content .= theme('table', array_keys($leaderboard[0]), $leaderboard);

  return $content;
}

/**
 * PAGE: Badges Page
 */
function summergame_badges_page() {
  $content .= '<h1>Summer Game Badges</h1>';

  $sg_image_path = base_path() . file_directory_path() . '/sg_images/';
  $rows = array();
  $res = db_query("SELECT * FROM sg_badges ORDER BY title ASC");
  while ($badge = db_fetch_array($res)) {
    $row = array(
      'Image' => '<img src="' . $sg_image_path . $badge['image'] . '_100.png">',
      'Description' => '<strong>' . $badge['title'] . '</strong><p>' . $badge['description'] . '</p>',
    );
    if ($badge['points']) {
      $row['Description'] .= '<p><em>' . $badge['points'] . ' point bonus when earned</em></p>';
    }
    $rows[] = $row;
  }
  $content .= theme('table', array(), $rows);

  return $content;
}

/**
 * HOOK: Receive and respond to text messages
 */
function summergame_twilio_respond($incoming) {
  // Prep generic response array
  $response_template = array('uid' => twilio_lookup_user($incoming['phone']),
                             'phone' => $incoming['phone'],
                             'incoming' => 0);
  $responses = array();

  if (preg_match('/^S?[ART]G[\d]{5}$/', $incoming['text'])) {
    $game_card_text = TRUE;
  }
  else {
    // check if it's a game code
    $gc = db_fetch_object(db_query("SELECT * FROM sg_game_codes WHERE text = '%s'", strtoupper($incoming['text'])));
    if ($gc->code_id) {
      $game_code_text = TRUE;
    }
  }
  if ($game_card_text || $game_code_text) {
    // check if we need a new player
    $player = summergame_player_load(array('phone' => $incoming['phone']));
    if (!$player) {
      $new_player_needed = TRUE;
    }
  }

  // New Player handling
  if (strtolower($incoming['text']) == 'newplayer' ||
      strtolower($incoming['text']) == 'new player' ||
      $new_player_needed) {
    $new_player = array('phone' => $incoming['phone']);
    $player = summergame_player_save($new_player);
    $response = $response_template;
    $response['text'] = "New Summer Game player #" . $player['pid'] . " created for this phone.";
    $responses[] = $response;
    // Signup bonus
    $points = summergame_player_points($player['pid'], 100, 'Signup',
                                       'Signed Up for the Summer Game');
    $response = $response_template;
    $response['text'] = "Earned $points Summer Game points for signing up!";
    $responses[] = $response;
  }

  if ($game_card_text || $game_code_text) {
    // Process results for ALL Player records with this number
    $res = db_query('SELECT pid FROM sg_players WHERE phone = %d', $incoming['phone']);
    while ($player_info = db_fetch_object($res)) {
      $player = summergame_player_load(array('pid' => $player_info->pid));
      // Associate a gamecard with the player if a game card ID
      if ($game_card_text) {
        $player['gamecard'] = $incoming['text'];
        summergame_player_save($player);
        $response = $response_template;
        $response['text'] .= 'Updated your player record with the scorecard ID ' . $incoming['text'];
        $responses[] = $response;
      }
      else {
        // Try to redeem text as a game code
        $status = summergame_redeem_code($player['pid'], $incoming['text']);
        if ($status['success'] || $status['error']) {
          $response = $response_template;
          $response['text'] .= $status['success'] . $status['error'];
          $responses[] = $response;
        }
        // If not recognized, no response to allow other handlers to respond
      }
    }
  }

  // Check if Trivia is active
  if (variable_get('summergame_trivia_active', FALSE) && !count($responses)) {
    $guess = $incoming['text'];
    $answer = variable_get('summergame_trivia_answer', '');

    db_query("INSERT INTO sg_trivia_guesses (guess) VALUES ('%s')", $guess);
    if (stripos($guess, $answer) !== FALSE) {
      // Correct Answer
      db_query("INSERT INTO sg_trivia_correct (phone) VALUES ('%d')", $incoming['phone']);
      $place = db_last_insert_id('sg_trivia', 'id');

      $response = $response_template;
      $response['text'] = "Your answer of \"$guess\" is Correct Answer #$place!";
      if ($place == 1) {
        $response['text'] .= ' Please see a staff member to claim your prize';
      }
      $responses[] = $response;
    }
    else {
      $response = $response_template;
      $response['text'] = "Sorry, your answer of \"$guess\" was incorrect. Please try again";
      $responses[] = $response;
    }
  }

  if (count($responses)) {
    return $responses;
  }
}

/**
 * HOOK: Add points when someone comments
 */
function summergame_comment($action, $op) {
  if ($op == 'publish') {
    if ($player = summergame_player_load(array('uid' => $action['uid']))) {
      $points = summergame_player_points($player['pid'], 50, 'Added Comment',
                                         'Commented on a website post nid:' . $action['nid']);
      drupal_set_message("Earned $points Summer Game points for commenting on a website post");
    }
  }
}

/**
 * HOOK: Add points when someone views a node
 */
function summergame_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  global $user;
  if ($user->uid && $op == 'view' && $page) {
    // check if user has already received points for viewing this node
    if ($player = summergame_player_load(array('uid' => $user->uid))) {
      $res = db_query("SELECT lid FROM sg_ledger WHERE pid = %d AND code_text = 'Read a Post' " .
                      "AND description LIKE '%%nid:%d' LIMIT 1",
                      $player['pid'], $node->nid);
      $rate_count = db_fetch_object($res);
      if (!$rate_count->lid) {
        $node_link = l($node->title, 'node/' . $node->nid);
        $points = summergame_player_points($player['pid'], 10, 'Read a Post',
                                           'Read a website post: ' . $node_link . ' nid:' . $node->nid);
        $points_link = l($points . ' Summer Game points', 'summergame/player');
        drupal_set_message("Earned $points_link for reading a website post");
      }
    }
  }
}

/**
 * UTILITY: Return the prize description array
 */
function summergame_get_prize_array() {
  return array(
    'bucket' => 'Bucket (Youth Mid-Way)',
    'silly' => 'Silly Putty (Youth Mid-Way)',
    'ybook' => 'Book (Youth Completion)',
    'raffle' => 'Raffle (Teen Completion)',
    'tbook' => 'Book (Teen Completion)',
    'fine' => 'Fine Forgiveness Coupon (Teen or Adult Completion)',
    'plum' => 'Plum Market Coupon (Teen or Adult Completion)',
    'dq' => 'Dairy Queen Coupon (Teen or Adult Completion)',
    'bread' => 'Great Harvest Bread Coupon (Teen or Adult Completion)',
  );
}
/**
 * UTILITY: Determine access to a player record
 */
function summergame_player_access($pid) {
  $access = FALSE;

  if (user_access('administer summergame')) {
    $access = TRUE;
  }
  else {
    global $user;
    if ($user->uid) {
      $player = summergame_player_load($pid);
      if ($user->uid == $player['uid']) {
        $access = TRUE;
      }
    }
  }
  return $access;
}

/**
 * UTILITY: Lookup a player record (based on the user_load function)
 */
function summergame_player_load($player_info = array()) {
  // Dynamically compose a SQL query:
  $query = array();
  $params = array();

  // Default to pid lookup
  if (is_numeric($player_info)) {
    $player_info = array('pid' => $player_info);
  }
  else if (!is_array($player_info)) {
    return FALSE;
  }

  foreach ($player_info as $key => $value) {
    if ($key == 'pid' || $key == 'phone' || $key == 'uid') {
      $query[] = "$key = %d";
      $params[] = $value;
    }
    else {
      $query[] = "LOWER($key) = LOWER('%s')";
      $params[] = $value;
    }
  }
  $result = db_query('SELECT * FROM {sg_players} WHERE ' . implode(' AND ', $query) . ' ORDER BY pid ASC LIMIT 1', $params);

  return db_fetch_array($result);
}

/**
 * UTILITY: Load ALL players associated with a user
 */
function summergame_player_load_all($uid) {
  $result = db_query("SELECT * FROM sg_players WHERE uid = %d ORDER BY pid ASC", $uid);
  $players = array();
  while ($player = db_fetch_array($result)) {
    $players[] = $player;
  }

  return $players;
}

/**
 * UTILITY: Load player points
 */
function summergame_get_player_points($pid) {
  $player_points = array(
    'ledger' => array(),
    'balance' => 0,
    'total' => 0,
  );
  $res = db_query('SELECT * FROM sg_ledger WHERE pid = %d ORDER BY timestamp ASC', $pid);
  while ($row = db_fetch_array($res)) {
    $player_points['ledger'][] = $row;
    $player_points['balance'] += $row['points'];
    if ($row['points'] > 0 && strpos($row['code_text'], 'Shop') !== 0) {
      // Don't count shop refunds in the total
      $player_points['total'] += $row['points'];
    }
  }

  return $player_points;
}

/**
 * UTILITY: Save a player record
 */
function summergame_player_save($player) {
  $query = array();
  $params = array();

  if ($pid = $player['pid']) {
    // Update existing player record
    unset($player['pid']);
    foreach ($player as $key => $value) {
      if (strtoupper($value) == 'NULL') {
        $query[] = $key . ' = NULL';
      }
      else {
        $query[] = $key . ' = ' . (is_numeric($value) ? '%d' : "'%s'");
        $params[] = $value;
      }
    }
    $params[] = $pid;
    db_query('UPDATE sg_players SET ' . implode($query, ', ') . ' WHERE pid = %d', $params);
  }
  else {
    // New player record
    foreach ($player as $key => $value) {
      $query[] = $key . ' = ' . (is_numeric($value) ? '%d' : "'%s'");
      $params[] = $value;
    }
    db_query('INSERT INTO sg_players SET ' . implode($query, ', '), $params);
    $pid = db_last_insert_id('sg_players', 'pid');
  }

  return summergame_player_load(array('pid' => $pid));
}

/**
 * UTILITY: Delete a player record
 *
 * Uses the same arguments as summergame_player_load
 */
function summergame_player_delete($player_info) {
  if ($player = summergame_player_load($player_info)) {
    // Delete points
    db_query("DELETE FROM sg_ledger WHERE pid = %d", $player['pid']);
    // Delete badges
    db_query("DELETE FROM sg_players_badges WHERE pid = %d", $player['pid']);
    // Delete player info
    db_query("DELETE FROM sg_players WHERE pid = %d", $player['pid']);
  }
}

/**
 * UTILITY: Redeem a game code for a player
 */
function summergame_redeem_code($pid, $code_text) {
  $code = db_fetch_object(db_query("SELECT * FROM sg_game_codes WHERE text = '%s'", strtoupper($code_text)));

  if ($code->code_id) {
    // Existing code
    $now = time();
    if ($now < $code->valid_start) {
      $start_date = date('F j, Y, g:i a', $code->valid_start);
      return array('error' => "Code \"$code->text\" is not yet valid. It will activate on $start_date");
    }
    else if ($now > $code->valid_end) {
      $end_date = date('F j, Y, g:i a', $code->valid_end);
      return array('error' => "Code \"$code->text\" is no longer valid. It expired on $end_date");
    }
    else if ($code->max_redemptions && ($code->num_redemptions >= $code->max_redemptions)) {
      return array('error' => "Code \"$code->text\" has reached maximum number of redemptions");
    }
    else {
      // check if player has already redeemed this code
      $existing = db_fetch_object(db_query("SELECT * FROM sg_ledger WHERE pid = %d AND code_text = '%s'", $pid, $code->text));
      if ($existing->lid) {
        $existing_date = date('F j, Y, g:i a', $existing->timestamp);
        return array('error' => "Code \"$code->text\" already redeemed on $existing_date");
      }
    }
    // Go ahead and redeem
    db_query("UPDATE sg_game_codes SET num_redemptions = num_redemptions + 1 WHERE code_id = %d", $code->code_id);
    $points = summergame_player_points($pid, $code->points, $code->text, $code->description);
    return array('success' => "Redeemed code \"$code->text\" for $points points");
  }
  else {
    return array('warning' => "Code is not recognized");
  }
}

/**
 * UTILITY: Apply points to a player
 */
function summergame_player_points($pid, $points, $code_text = '', $description = '') {
  if (strpos($code_text, 'mat_code:') !== FALSE ||
      $code_text == 'Checkout History' ||
      $code_text == 'Read a Post') {
    $point_limit = 1000;
    $day_start = mktime(0, 0, 0);

    $sql = "SELECT SUM(points) AS total FROM sg_ledger " .
           "WHERE pid = %d " .
           "AND timestamp > %d " .
           "AND (code_text LIKE 'mat_code:%' " .
           "OR code_text LIKE 'Checkout History' " .
           "OR code_text LIKE 'Read a Post')";
    $total = db_fetch_object(db_query($sql, $pid, $day_start));
    if ($total->total > $point_limit) {
      drupal_set_message("Sorry, you are over the limit of $point_limit points for today for this category of points", 'error');
      return 0;
    }
  }

  db_query("INSERT INTO sg_ledger (pid, points, code_text, description, timestamp) " .
           "VALUES (%d, %d, '%s', '%s', %d)",
           $pid, $points, $code_text, $description, time());

  // Check if the new points affect any badges
  if ($messages = summergame_player_check_badges($pid)) {
    foreach($messages as $message) {
      drupal_set_message($message);
    }
  }

  return $points;
}

/**
 * UTILITY: Check player for new badges
 */
function summergame_player_check_badges($pid) {
  $messages = array();

  $player_bids = array();
  $res = db_query("SELECT * FROM sg_players_badges WHERE pid = %d", $pid);
  while ($player_badge = db_fetch_object($res)) {
    $player_bids[] = $player_badge->bid;
  }
  $res = db_query("SELECT * FROM sg_badges WHERE formula != ''");
  while ($badge = db_fetch_object($res)) {
    if (!in_array($badge->bid, $player_bids)) {
      $awarded = FALSE;
      if (strpos($badge->formula, '::')) {
        // Multiple of a code text formula
        list($count_limit, $text_pattern) = explode('::', $badge->formula);
        $lid_count = db_fetch_object(db_query("SELECT COUNT(lid) AS lid_count FROM sg_ledger WHERE pid = %d AND code_text LIKE '%%%s%%'", $pid, $text_pattern));
        if ($lid_count->lid_count >= $count_limit) {
          summergame_player_award_badge($pid, $badge->bid);
          $awarded = TRUE;
        }
      }
      else {
        // Collection Badge
        $eligible = TRUE;
        foreach(explode(',', $badge->formula) as $code_text) {
          $ledger = db_fetch_object(db_query("SELECT lid FROM sg_ledger WHERE pid = %d and code_text LIKE '%%%s%%' LIMIT 1", $pid, $code_text));
          if (!$ledger->lid) {
            $eligible = FALSE;
            break;
          }
        }
        if ($eligible) {
          summergame_player_award_badge($pid, $badge->bid);
          $awarded = TRUE;
        }
      }

      if ($awarded) {
        $messages[] = "Earned the $badge->title Badge!";
        // check if a bonus should be applied
        if ($badge->points) {
          db_query("INSERT INTO sg_ledger (pid, points, code_text, description, timestamp) " .
                   "VALUES (%d, %d, '%s', '%s', %d)",
                   $pid, $badge->points, 'Badge Bonus', "Earned the $badge->title Badge", time());
          $messages[] = "Received $badge->points bonus points for earning the $badge->title Badge";
        }
      }
    }
  }

  return $messages;
}

/**
 * UTILITY: Award a badge to a player
 */
function summergame_player_award_badge($pid, $bid) {
  db_query("INSERT IGNORE INTO sg_players_badges (pid, bid, timestamp) " .
           "VALUES (%d, %d, %d)",
           $pid, $bid, time());
}

/**
 * PAGE: Generate and return a PDF version of the game card PDF
 */
function summergame_pdf($type = 'adult', $code_id = 0) {
  require_once('/usr/local/lib/libphp-aadl/contrib/fpdf/fpdf.php');
  require_once('/usr/local/lib/libphp-aadl/contrib/fpdi/fpdi.php');
  require_once('/usr/local/lib/libphp-aadl/contrib/redisent/redisent.php');
  $file_path = drupal_get_path('module', 'summergame') . '/pdf/';
  $redis = new Redisent('multivac');

  if ($type == 'gamecode') {
    $gamecode = db_fetch_object(db_query("SELECT * FROM sg_game_codes WHERE code_id = %d", $code_id));

    $event_code = strtoupper($gamecode->text); // Code for the event, Need to be in all CAPS
    $event_points = $gamecode->points . ' Points'; // Points for the event
    $event_title = $gamecode->description; // Title of event

    // initiate FPDI
    $pdf =& new FPDI('L', 'mm', 'Letter');
    $pdf->SetAutoPageBreak(FALSE);

    $pdf->AddPage();
    // set the sourcefile
    $pdf->setSourceFile($file_path . 'code_template.pdf');
    $tplidx = $pdf->importPage(1);
    $pdf->useTemplate($tplidx);

    // now write some text
    $pdf->AddFont('StantonICG', '', 'StantonICG.php');
    $pdf->SetFont('StantonICG', '', 110);
    $pdf->SetXY(20, 45);
    $pdf->Cell(0, 10, $event_code, 0, 1, 'C');

    $pdf->SetXY(80, 130);
    $pdf->Cell(0, 10, $event_points, 0, 1);

    $pdf->SetFont('Helvetica', 'B', 12);
    $pdf->SetXY(10, 200);
    $pdf->Cell(0, 10, $event_title, 0, 1);

    $pdf->Output($event_code . '_code.pdf', 'D');
  }
  if ($type == 'adult2') {
    // initiate FPDI
    $pdf =& new FPDI('P', 'mm', 'Letter');
    $pdf->SetAutoPageBreak(FALSE);

    // set the sourcefile
    $pdf->setSourceFile($file_path . 'adult_game.pdf');
    $tplidx = $pdf->importPage(1);
    $pdf->addPage();
    $pdf->useTemplate($tplidx);

    // now write unique number
    $id = 'AG' . $redis->incr('agpdfcounter');
    $pdf->SetFont('Helvetica', 'B', 13);

    $pdf->SetXY(39, 106.5);
    $pdf->Cell(0, 10, $id, 0, 1);

    $pdf->SetXY(163, 126.5);
    $pdf->Cell(0, 10, $id, 0, 1);

    // now write 2nd set unique number
    $id = 'AG' . $redis->incr('agpdfcounter');
    $pdf->SetXY(39, 243);
    $pdf->Cell(0, 10, $id, 0, 1);

    $pdf->SetXY(161, 264);
    $pdf->Cell(0, 10, $id, 0, 1);

    $pdf->Output('newadultgame.pdf', 'D');
  }
  else if ($type == 'teen') {
    // initiate FPDI
    $pdf =& new FPDI('P', 'mm', 'Letter');
    $pdf->SetAutoPageBreak(FALSE);

    // set the sourcefile
    $pdf->setSourceFile($file_path . 'teen_game.pdf');
    $tplidx = $pdf->importPage(1);
    $pdf->addPage();
    $pdf->useTemplate($tplidx);

    // now write some text
    $id = 'TG' . $redis->incr('tgpdfcounter');
    $pdf->SetFont('Helvetica', 'B', 13);

    $pdf->SetXY(35, 233);
    $pdf->Cell(0, 10, $id, 0, 1);

    $pdf->SetXY(164, 261);
    $pdf->Cell(0, 10, $id, 0, 1);

    $pdf->Output('newteengame.pdf', 'D');
  }
  else { // default to the adult single player form
    // initiate FPDI
    $pdf =& new FPDI('P', 'mm', 'Letter');
    $pdf->SetAutoPageBreak(FALSE);

    // set the sourcefile
    $pdf->setSourceFile($file_path . 'single_adult_game.pdf');
    $tplidx = $pdf->importPage(1);
    $pdf->addPage();
    $pdf->useTemplate($tplidx);

    // now write some text
    $id = 'AG' . $redis->incr('agpdfcounter');
    $pdf->SetFont('Helvetica','B',13);

    $pdf->SetXY(39, 110);
    $pdf->Cell(0, 10, $id, 0, 1);

    $pdf->SetXY(161, 130);
    $pdf->Cell(0, 10, $id, 0, 1);

    $pdf->Output('AGSummer_Game.pdf', 'D');
  }
}
